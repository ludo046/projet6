{"ast":null,"code":"import _classCallCheck from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { inject, InjectionToken, EventEmitter, Inject, Injectable, Optional, Directive, Output, Input, NgModule, defineInjectable } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * \\@docs-private\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nvar DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction DIR_DOCUMENT_FACTORY() {\n  return inject(DOCUMENT);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n\n\nvar Directionality = /*#__PURE__*/function () {\n  /**\n   * @param {?=} _document\n   */\n  function Directionality(_document) {\n    _classCallCheck(this, Directionality);\n\n    /**\n     * The current 'ltr' or 'rtl' value.\n     */\n    this.value = 'ltr';\n    /**\n     * Stream that emits whenever the 'ltr' / 'rtl' state changes.\n     */\n\n    this.change = new EventEmitter();\n\n    if (_document) {\n      /** @type {?} */\n      var bodyDir = _document.body ? _document.body.dir : null;\n      /** @type {?} */\n\n      var htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      /** @type {?} */\n\n      var value = bodyDir || htmlDir;\n      this.value = value === 'ltr' || value === 'rtl' ? value : 'ltr';\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Directionality, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.change.complete();\n    }\n  }]);\n\n  return Directionality;\n}();\n\nDirectionality.ɵfac = function Directionality_Factory(t) {\n  return new (t || Directionality)(ɵngcc0.ɵɵinject(DIR_DOCUMENT, 8));\n};\n\nDirectionality.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Directionality,\n  factory: Directionality.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nDirectionality.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DIR_DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nDirectionality.ngInjectableDef = defineInjectable({\n  factory: function Directionality_Factory() {\n    return new Directionality(inject(DIR_DOCUMENT, 8));\n  },\n  token: Directionality,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Directionality, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DIR_DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n\n\nvar Dir = /*#__PURE__*/function () {\n  function Dir() {\n    _classCallCheck(this, Dir);\n\n    this._dir = 'ltr';\n    /**\n     * Whether the `value` has been set to its initial value.\n     */\n\n    this._isInitialized = false;\n    /**\n     * Event emitted when the direction changes.\n     */\n\n    this.change = new EventEmitter();\n  }\n  /**\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  _createClass(Dir, [{\n    key: \"dir\",\n    get: function get() {\n      return this._dir;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var old = this._dir;\n      this._dir = value === 'ltr' || value === 'rtl' ? value : 'ltr';\n\n      if (old !== this._dir && this._isInitialized) {\n        this.change.emit(this._dir);\n      }\n    }\n    /**\n     * Current layout direction of the element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.dir;\n    }\n    /**\n     * Initialize once default value has been set.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.change.complete();\n    }\n  }]);\n\n  return Dir;\n}();\n\nDir.ɵfac = function Dir_Factory(t) {\n  return new (t || Dir)();\n};\n\nDir.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: Dir,\n  selectors: [[\"\", \"dir\", \"\"]],\n  hostVars: 1,\n  hostBindings: function Dir_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"dir\", ctx.dir);\n    }\n  },\n  inputs: {\n    dir: \"dir\"\n  },\n  outputs: {\n    change: \"dirChange\"\n  },\n  exportAs: [\"dir\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: Directionality,\n    useExisting: Dir\n  }])]\n});\nDir.propDecorators = {\n  change: [{\n    type: Output,\n    args: ['dirChange']\n  }],\n  dir: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Dir, [{\n    type: Directive,\n    args: [{\n      selector: '[dir]',\n      providers: [{\n        provide: Directionality,\n        useExisting: Dir\n      }],\n      host: {\n        '[dir]': 'dir'\n      },\n      exportAs: 'dir'\n    }]\n  }], function () {\n    return [];\n  }, {\n    change: [{\n      type: Output,\n      args: ['dirChange']\n    }],\n    dir: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar BidiModule = function BidiModule() {\n  _classCallCheck(this, BidiModule);\n};\n\nBidiModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: BidiModule\n});\nBidiModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function BidiModule_Factory(t) {\n    return new (t || BidiModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BidiModule, {\n    declarations: [Dir],\n    exports: [Dir]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BidiModule, [{\n    type: NgModule,\n    args: [{\n      exports: [Dir],\n      declarations: [Dir]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { Directionality, DIR_DOCUMENT, Dir, BidiModule, DIR_DOCUMENT_FACTORY as ɵa };","map":{"version":3,"sources":["../../../src/cdk/bidi/dir-document-token.ts","../../../src/cdk/bidi/directionality.ts","../../../src/cdk/bidi/dir.ts","../../../src/cdk/bidi/bidi-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\n\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY,\n});\n\n/** @docs-private */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n  return inject(DOCUMENT);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Inject, Injectable, Optional, OnDestroy} from '@angular/core';\nimport {DIR_DOCUMENT} from './dir-document-token';\n\n\nexport type Direction = 'ltr' | 'rtl';\n\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n  /** The current 'ltr' or 'rtl' value. */\n  readonly value: Direction = 'ltr';\n\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n  readonly change = new EventEmitter<Direction>();\n\n  constructor(@Optional() @Inject(DIR_DOCUMENT) _document?: any) {\n    if (_document) {\n      // TODO: handle 'auto' value -\n      // We still need to account for dir=\"auto\".\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      const value = bodyDir || htmlDir;\n      this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Output,\n  Input,\n  EventEmitter,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport {Direction, Directionality} from './directionality';\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n@Directive({\n  selector: '[dir]',\n  providers: [{provide: Directionality, useExisting: Dir}],\n  host: {'[dir]': 'dir'},\n  exportAs: 'dir',\n})\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n  _dir: Direction = 'ltr';\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Event emitted when the direction changes. */\n  @Output('dirChange') change = new EventEmitter<Direction>();\n\n  /** @docs-private */\n  @Input()\n  get dir(): Direction { return this._dir; }\n  set dir(value: Direction) {\n    const old = this._dir;\n    this._dir = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n    if (old !== this._dir && this._isInitialized) {\n      this.change.emit(this._dir);\n    }\n  }\n\n  /** Current layout direction of the element. */\n  get value(): Direction { return this.dir; }\n\n  /** Initialize once default value has been set. */\n  ngAfterContentInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {Dir} from './dir';\n\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir],\n})\nexport class BidiModule { }\n"]},"metadata":{},"sourceType":"module"}