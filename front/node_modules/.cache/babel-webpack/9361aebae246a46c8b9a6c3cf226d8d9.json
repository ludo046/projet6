{"ast":null,"code":"import _toConsumableArray from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription, defer, fromEvent, merge, of, Subject } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nvar _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n  }\n}\n\nvar _c1 = [\"*\"];\nvar _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\n\nvar MatAutocompleteSelectedEvent =\n/**\n * @param {?} source\n * @param {?} option\n */\nfunction MatAutocompleteSelectedEvent(source, option) {\n  _classCallCheck(this, MatAutocompleteSelectedEvent);\n\n  this.source = source;\n  this.option = option;\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatAutocompleteBase = function MatAutocompleteBase() {\n  _classCallCheck(this, MatAutocompleteBase);\n};\n/** @type {?} */\n\n\nvar _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** *\n * Injection token to be used to override the default options for `mat-autocomplete`.\n  @type {?} */\n\n\nvar MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n\nvar MatAutocomplete = /*#__PURE__*/function (_MatAutocompleteMixin) {\n  _inherits(MatAutocomplete, _MatAutocompleteMixin);\n\n  var _super = _createSuper(MatAutocomplete);\n\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} defaults\n   */\n  function MatAutocomplete(_changeDetectorRef, _elementRef, defaults) {\n    var _this;\n\n    _classCallCheck(this, MatAutocomplete);\n\n    _this = _super.call(this);\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._elementRef = _elementRef;\n    /**\n     * Whether the autocomplete panel should be visible, depending on option length.\n     */\n\n    _this.showPanel = false;\n    _this._isOpen = false;\n    /**\n     * Function that maps an option's control value to its display value in the trigger.\n     */\n\n    _this.displayWith = null;\n    /**\n     * Event that is emitted whenever an option from the list is selected.\n     */\n\n    _this.optionSelected = new EventEmitter();\n    /**\n     * Event that is emitted when the autocomplete panel is opened.\n     */\n\n    _this.opened = new EventEmitter();\n    /**\n     * Event that is emitted when the autocomplete panel is closed.\n     */\n\n    _this.closed = new EventEmitter();\n    _this._classList = {};\n    /**\n     * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n     */\n\n    _this.id = \"mat-autocomplete-\".concat(_uniqueAutocompleteIdCounter++);\n    _this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    return _this;\n  }\n  /**\n   * Whether the autocomplete panel is open.\n   * @return {?}\n   */\n\n\n  _createClass(MatAutocomplete, [{\n    key: \"isOpen\",\n    get: function get() {\n      return this._isOpen && this.showPanel;\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n\n  }, {\n    key: \"autoActiveFirstOption\",\n    get: function get() {\n      return this._autoActiveFirstOption;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"classList\",\n    set: function set(value) {\n      var _this2 = this;\n\n      if (value && value.length) {\n        value.split(' ').forEach(function (className) {\n          return _this2._classList[className.trim()] = true;\n        });\n        this._elementRef.nativeElement.className = '';\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap(); // Set the initial visibility state.\n\n      this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setScrollTop\",\n    value: function _setScrollTop(scrollTop) {\n      if (this.panel) {\n        this.panel.nativeElement.scrollTop = scrollTop;\n      }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getScrollTop\",\n    value: function _getScrollTop() {\n      return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setVisibility\",\n    value: function _setVisibility() {\n      this.showPanel = !!this.options.length;\n      this._classList['mat-autocomplete-visible'] = this.showPanel;\n      this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitSelectEvent\",\n    value: function _emitSelectEvent(option) {\n      /** @type {?} */\n      var event = new MatAutocompleteSelectedEvent(this, option);\n      this.optionSelected.emit(event);\n    }\n  }]);\n\n  return MatAutocomplete;\n}(_MatAutocompleteMixinBase);\n\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) {\n  return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS));\n};\n\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  viewQuery: function MatAutocomplete_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, 1);\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\",\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    classList: [\"class\", \"classList\"],\n    panelWidth: \"panelWidth\"\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    }\n  },\n  directives: [ɵngcc1.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatAutocomplete.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatAutocomplete.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MatOptgroup]\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    displayWith: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }],\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MatOptgroup]\n    }],\n    panelWidth: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nvar MatAutocompleteOrigin =\n/**\n * @param {?} elementRef\n */\nfunction MatAutocompleteOrigin(elementRef) {\n  _classCallCheck(this, MatAutocompleteOrigin);\n\n  this.elementRef = elementRef;\n};\n\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) {\n  return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"]\n});\n/** @nocollapse */\n\nMatAutocompleteOrigin.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The height of each autocomplete option.\n  @type {?} */\n\n\nvar AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** *\n * The total height of the autocomplete panel.\n  @type {?} */\n\nvar AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** *\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n  @type {?} */\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/** *\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n  @type {?} */\n\nvar MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatAutocompleteTrigger;\n  }),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\nvar MatAutocompleteTrigger = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?} _overlay\n   * @param {?} _viewContainerRef\n   * @param {?} _zone\n   * @param {?} _changeDetectorRef\n   * @param {?} scrollStrategy\n   * @param {?} _dir\n   * @param {?} _formField\n   * @param {?} _document\n   * @param {?=} _viewportRuler\n   */\n  function MatAutocompleteTrigger(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatAutocompleteTrigger);\n\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /**\n     * Whether or not the label state is being overridden.\n     */\n\n    this._manuallyFloatingLabel = false;\n    /**\n     * Subscription to viewport size changes.\n     */\n\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n\n    this._canOpenOnNextFocus = true;\n    /**\n     * Stream of keyboard events that can close the panel.\n     */\n\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n\n    this._windowBlurHandler = function () {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      _this3._canOpenOnNextFocus = document.activeElement !== _this3._element.nativeElement || _this3.panelOpen;\n    };\n    /**\n     * `View -> model callback called when value changes`\n     */\n\n\n    this._onChange = function () {};\n    /**\n     * `View -> model callback called when autocomplete has been touched`\n     */\n\n\n    this._onTouched = function () {};\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * \\@docs-private\n     */\n\n\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /**\n     * Stream of autocomplete option selections.\n     */\n\n    this.optionSelections = defer(function () {\n      if (_this3.autocomplete && _this3.autocomplete.options) {\n        return merge.apply(void 0, _toConsumableArray(_this3.autocomplete.options.map(function (option) {\n          return option.onSelectionChange;\n        })));\n      } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n\n\n      return _this3._zone.onStable.asObservable().pipe(take(1), switchMap(function () {\n        return _this3.optionSelections;\n      }));\n    });\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(function () {\n        window.addEventListener('blur', _this3._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   * @return {?}\n   */\n\n\n  _createClass(MatAutocompleteTrigger, [{\n    key: \"autocompleteDisabled\",\n    get: function get() {\n      return this._autocompleteDisabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('blur', this._windowBlurHandler);\n      }\n\n      this._viewportSubscription.unsubscribe();\n\n      this._componentDestroyed = true;\n\n      this._destroyPanel();\n\n      this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"panelOpen\",\n    get: function get() {\n      return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"openPanel\",\n    value: function openPanel() {\n      this._attachOverlay();\n\n      this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"closePanel\",\n    value: function closePanel() {\n      this._resetLabel();\n\n      if (!this._overlayAttached) {\n        return;\n      }\n\n      if (this.panelOpen) {\n        // Only emit if the panel was visible.\n        this.autocomplete.closed.emit();\n      }\n\n      this.autocomplete._isOpen = this._overlayAttached = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n\n        this._closingActionsSubscription.unsubscribe();\n      } // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._overlayAttached) {\n        /** @type {?} */\n        this._overlayRef.updatePosition();\n      }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"panelClosingActions\",\n    get: function get() {\n      var _this4 = this;\n\n      return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(function () {\n        return _this4._overlayAttached;\n      })), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(function () {\n        return _this4._overlayAttached;\n      })) : of()).pipe( // Normalize the output so we return a consistent type.\n      map(function (event) {\n        return event instanceof MatOptionSelectionChange ? event : null;\n      }));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n\n  }, {\n    key: \"activeOption\",\n    get: function get() {\n      if (this.autocomplete && this.autocomplete._keyManager) {\n        return this.autocomplete._keyManager.activeItem;\n      }\n\n      return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOutsideClickStream\",\n    value: function _getOutsideClickStream() {\n      var _this5 = this;\n\n      if (!this._document) {\n        return of(null);\n      }\n\n      return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend')).pipe(filter(function (event) {\n        /** @type {?} */\n        var clickTarget =\n        /** @type {?} */\n        event.target;\n        /** @type {?} */\n\n        var formField = _this5._formField ? _this5._formField._elementRef.nativeElement : null;\n        return _this5._overlayAttached && clickTarget !== _this5._element.nativeElement && (!formField || !formField.contains(clickTarget)) && !!_this5._overlayRef && !_this5._overlayRef.overlayElement.contains(clickTarget);\n      }));\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      var _this6 = this;\n\n      Promise.resolve(null).then(function () {\n        return _this6._setTriggerValue(value);\n      });\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n      // in line with other browsers. By default, pressing escape on IE will cause it to revert\n      // the input value to the one that it had on focus, however it won't dispatch any events\n      // which means that the model value will be out of sync with the view.\n\n      if (keyCode === ESCAPE) {\n        event.preventDefault();\n      }\n\n      if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n        this.activeOption._selectViaInteraction();\n\n        this._resetActiveItem();\n\n        event.preventDefault();\n      } else if (this.autocomplete) {\n        /** @type {?} */\n        var prevActiveItem = this.autocomplete._keyManager.activeItem;\n        /** @type {?} */\n\n        var isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n        if (this.panelOpen || keyCode === TAB) {\n          this.autocomplete._keyManager.onKeydown(event);\n        } else if (isArrowKey && this._canOpen()) {\n          this.openPanel();\n        }\n\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleInput\",\n    value: function _handleInput(event) {\n      /** @type {?} */\n      var target =\n      /** @type {?} */\n      event.target;\n      /** @type {?} */\n\n      var value = target.value; // Based on `NumberValueAccessor` from forms.\n\n      if (target.type === 'number') {\n        value = value == '' ? null : parseFloat(value);\n      } // If the input has a placeholder, IE will fire the `input` event on page load,\n      // focus and blur, in addition to when the user actually changed the value. To\n      // filter out all of the extra events, we save the value on focus and between\n      // `input` events, and we check whether it changed.\n      // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n      if (this._previousValue !== value && document.activeElement === event.target) {\n        this._previousValue = value;\n\n        this._onChange(value);\n\n        if (this._canOpen()) {\n          this.openPanel();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleFocus\",\n    value: function _handleFocus() {\n      if (!this._canOpenOnNextFocus) {\n        this._canOpenOnNextFocus = true;\n      } else if (this._canOpen()) {\n        this._previousValue = this._element.nativeElement.value;\n\n        this._attachOverlay();\n\n        this._floatLabel(true);\n      }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_floatLabel\",\n    value: function _floatLabel() {\n      var shouldAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this._formField && this._formField.floatLabel === 'auto') {\n        if (shouldAnimate) {\n          this._formField._animateAndLockLabel();\n        } else {\n          this._formField.floatLabel = 'always';\n        }\n\n        this._manuallyFloatingLabel = true;\n      }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetLabel\",\n    value: function _resetLabel() {\n      if (this._manuallyFloatingLabel) {\n        this._formField.floatLabel = 'auto';\n        this._manuallyFloatingLabel = false;\n      }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_scrollToOption\",\n    value: function _scrollToOption() {\n      /** @type {?} */\n      var index = this.autocomplete._keyManager.activeItemIndex || 0;\n      /** @type {?} */\n\n      var labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n      /** @type {?} */\n\n\n      var newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n\n      this.autocomplete._setScrollTop(newScrollPosition);\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subscribeToClosingActions\",\n    value: function _subscribeToClosingActions() {\n      var _this7 = this;\n\n      /** @type {?} */\n      var firstStable = this._zone.onStable.asObservable().pipe(take(1));\n      /** @type {?} */\n\n\n      var optionChanges = this.autocomplete.options.changes.pipe(tap(function () {\n        return _this7._positionStrategy.reapplyLastPosition();\n      }), // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)); // When the zone is stable initially, and when the option list changes...\n\n      return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      switchMap(function () {\n        _this7._resetActiveItem();\n\n        _this7.autocomplete._setVisibility();\n\n        if (_this7.panelOpen) {\n          /** @type {?} */\n          _this7._overlayRef.updatePosition();\n        }\n\n        return _this7.panelClosingActions;\n      }), // when the first closing event occurs...\n      take(1)) // set the value, close the panel, and complete.\n      .subscribe(function (event) {\n        return _this7._setValueAndClose(event);\n      });\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_destroyPanel\",\n    value: function _destroyPanel() {\n      if (this._overlayRef) {\n        this.closePanel();\n\n        this._overlayRef.dispose();\n\n        this._overlayRef = null;\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTriggerValue\",\n    value: function _setTriggerValue(value) {\n      /** @type {?} */\n      var toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n      /** @type {?} */\n\n      var inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n      // through change detection.\n\n      if (this._formField) {\n        this._formField._control.value = inputValue;\n      } else {\n        this._element.nativeElement.value = inputValue;\n      }\n\n      this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setValueAndClose\",\n    value: function _setValueAndClose(event) {\n      if (event && event.source) {\n        this._clearPreviousSelectedOption(event.source);\n\n        this._setTriggerValue(event.source.value);\n\n        this._onChange(event.source.value);\n\n        this._element.nativeElement.focus();\n\n        this.autocomplete._emitSelectEvent(event.source);\n      }\n\n      this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @param {?} skip\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearPreviousSelectedOption\",\n    value: function _clearPreviousSelectedOption(skip) {\n      this.autocomplete.options.forEach(function (option) {\n        if (option != skip && option.selected) {\n          option.deselect();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this8 = this;\n\n      if (!this.autocomplete) {\n        throw getMatAutocompleteMissingPanelError();\n      }\n\n      if (!this._overlayRef) {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n        this._overlayRef = this._overlay.create(this._getOverlayConfig()); // Use the `keydownEvents` in order to take advantage of\n        // the overlay event targeting provided by the CDK overlay.\n\n        this._overlayRef.keydownEvents().subscribe(function (event) {\n          // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n          // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n          if (event.keyCode === ESCAPE || event.keyCode === UP_ARROW && event.altKey) {\n            _this8._resetActiveItem();\n\n            _this8._closeKeyEventStream.next();\n          }\n        });\n\n        if (this._viewportRuler) {\n          this._viewportSubscription = this._viewportRuler.change().subscribe(function () {\n            if (_this8.panelOpen && _this8._overlayRef) {\n              _this8._overlayRef.updateSize({\n                width: _this8._getPanelWidth()\n              });\n            }\n          });\n        }\n      } else {\n        // Update the panel width and direction, in case anything has changed.\n        this._overlayRef.updateSize({\n          width: this._getPanelWidth()\n        });\n      }\n\n      if (this._overlayRef && !this._overlayRef.hasAttached()) {\n        this._overlayRef.attach(this._portal);\n\n        this._closingActionsSubscription = this._subscribeToClosingActions();\n      }\n      /** @type {?} */\n\n\n      var wasOpen = this.panelOpen;\n\n      this.autocomplete._setVisibility();\n\n      this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n      // autocomplete won't be shown if there are no options.\n\n      if (this.panelOpen && wasOpen !== this.panelOpen) {\n        this.autocomplete.opened.emit();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig() {\n      return new OverlayConfig({\n        positionStrategy: this._getOverlayPosition(),\n        scrollStrategy: this._scrollStrategy(),\n        width: this._getPanelWidth(),\n        direction: this._dir\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function _getOverlayPosition() {\n      this._positionStrategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false).withPositions([{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        panelClass: 'mat-autocomplete-panel-above'\n      }]);\n      return this._positionStrategy;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getConnectedElement\",\n    value: function _getConnectedElement() {\n      if (this.connectedTo) {\n        return this.connectedTo.elementRef;\n      }\n\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPanelWidth\",\n    value: function _getPanelWidth() {\n      return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getHostWidth\",\n    value: function _getHostWidth() {\n      return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetActiveItem\",\n    value: function _resetActiveItem() {\n      this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canOpen\",\n    value: function _canOpen() {\n      /** @type {?} */\n      var element = this._element.nativeElement;\n      return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n  }]);\n\n  return MatAutocompleteTrigger;\n}();\n\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) {\n  return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.MatFormField, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler));\n};\n\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostVars: 6,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.activeOption == null ? null : ctx.activeOption.id)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id);\n    }\n  },\n  inputs: {\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"],\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"]\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR])]\n});\n/** @nocollapse */\n\nMatAutocompleteTrigger.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Overlay\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Host\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: ViewportRuler\n  }];\n};\n\nMatAutocompleteTrigger.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: \"input[matAutocomplete], textarea[matAutocomplete]\",\n      host: {\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': 'activeOption?.id',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.Overlay\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc5.ViewportRuler\n    }];\n  }, {\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }],\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatAutocompleteModule = function MatAutocompleteModule() {\n  _classCallCheck(this, MatAutocompleteModule);\n};\n\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatAutocompleteModule_Factory(t) {\n    return new (t || MatAutocompleteModule)();\n  },\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule], MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, {\n    declarations: function declarations() {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin];\n    },\n    imports: function imports() {\n      return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MatAutocompleteBase, _MatAutocompleteMixinBase, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin as ɵa29 };","map":{"version":3,"sources":["../../../src/lib/autocomplete/autocomplete.ts","../../../src/lib/autocomplete/autocomplete-origin.ts","../../../src/lib/autocomplete/autocomplete-trigger.ts","../../../src/lib/autocomplete/autocomplete-module.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n"]},"metadata":{},"sourceType":"module"}