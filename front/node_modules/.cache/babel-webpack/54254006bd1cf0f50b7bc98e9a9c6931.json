{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nfunction coerceBooleanProperty(value) {\n  return value != null && \"\".concat(value) !== 'false';\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\n\n\nfunction coerceNumberProperty(value) {\n  var fallbackValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\n\n\nfunction _isNumberValue(value) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(\n  /** @type {?} */\n  value)) && !isNaN(Number(value));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Wraps the provided value in an array, unless the provided value is an array.\n * @template T\n * @param {?} value\n * @return {?}\n */\n\n\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Coerces a value to a CSS pixel value.\n * @param {?} value\n * @return {?}\n */\n\n\nfunction coerceCssPixelValue(value) {\n  if (value == null) {\n    return '';\n  }\n\n  return typeof value === 'string' ? value : \"\".concat(value, \"px\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { coerceBooleanProperty, coerceNumberProperty, _isNumberValue, coerceArray, coerceCssPixelValue };","map":{"version":3,"sources":["../../../src/cdk/coercion/boolean-property.ts","../../../src/cdk/coercion/number-property.ts","../../../src/cdk/coercion/array.ts","../../../src/cdk/coercion/css-pixel-value.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AASA,SAAgB,qBAAhB,CAAsC,KAAtC,EAAA;AACE,SAAO,KAAK,IAAI,IAAT,IAAT,UAAA,KAAA,MAAyC,OAAvC;AACD;AACA;AAAI;AAAkC;AAAkE;;AAAK;AAAI;AAAoB;AAA6B;AAAe;;;ACDlL,SAAgB,oBAAhB,CAAqC,KAArC,EAAA;AAAA,MAAiD,aAAjD,uEAAiE,CAAjE;AACE,SAAO,cAAc,CAAC,KAAD,CAAd,GAAwB,MAAM,CAAC,KAAD,CAA9B,GAAwC,aAA/C;AACD;AACD;AACG;AACkD;AAErD;AACgB;AAAe;;;AAA/B,SAAgB,cAAhB,CAA+B,KAA/B,EAAA;AAAE;AACgD;AACH;AAE7C,SAAO,CAAC,KAAK,CAAC,UAAU;AAAA;AAAC,EAAA,KAAD,CAAX,CAAN,IAAoC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAD,CAAP,CAAjD;AACD;AACA;AAAI;AAAkC;AAAkE;;AAAK;AAAI;AAAgF;AAAe;AAAoB;AAAe;;;AChBpP,SAAgB,WAAhB,CAA+B,KAA/B,EAAA;AACE,SAAO,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAvB,GAA+B,CAAC,KAAD,CAAtC;AACD;AACA;AAAI;AAAkC;AAAkE;;AAAK;AAAI;AAAyC;AAAoB;AAAe;;;ACH9L,SAAgB,mBAAhB,CAAoC,KAApC,EAAA;AACE,MAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,WAAO,EAAP;AACD;;AAED,SAAO,OAAO,KAAP,KAAiB,QAAjB,GAAT,KAAS,aAAT,KAAS,OAAP;AACD;AACA;AAAI;AAAkC;AAAkE;;AAAK;AAAI;AAAkC;AAAkE;;;AAAK,SAAA,qBAAA,EAAA,oBAAA,EAAA,cAAA,EAAA,WAAA,EAAA,mBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Coerces a data-bound value (typically a string) to a number. */\nexport function coerceNumberProperty(value: any): number;\nexport function coerceNumberProperty<D>(value: any, fallback: D): number | D;\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nexport function _isNumberValue(value: any): boolean {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value as any)) && !isNaN(Number(value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Coerces a value to a CSS pixel value. */\nexport function coerceCssPixelValue(value: any): string {\n  if (value == null) {\n    return '';\n  }\n\n  return typeof value === 'string' ? value : `${value}px`;\n}\n"]},"metadata":{},"sourceType":"module"}