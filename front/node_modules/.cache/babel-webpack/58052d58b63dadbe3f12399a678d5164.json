{"ast":null,"code":"import _classCallCheck from \"/Users/ludovicmoissinac/dev/projetFormation/projet6/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ludovicmoissinac/dev/projetFormation/projet6/front/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, defineInjectable, inject } from '@angular/core';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Options to pass to the animationstart listener.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar listenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n\nvar AutofillMonitor = /*#__PURE__*/function () {\n  /**\n   * @param {?} _platform\n   * @param {?} _ngZone\n   */\n  function AutofillMonitor(_platform, _ngZone) {\n    _classCallCheck(this, AutofillMonitor);\n\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._monitoredElements = new Map();\n  }\n  /**\n   * @param {?} elementOrRef\n   * @return {?}\n   */\n\n\n  _createClass(AutofillMonitor, [{\n    key: \"monitor\",\n    value: function monitor(elementOrRef) {\n      var _this = this;\n\n      if (!this._platform.isBrowser) {\n        return EMPTY;\n      }\n      /** @type {?} */\n\n\n      var element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n      /** @type {?} */\n\n      var info = this._monitoredElements.get(element);\n\n      if (info) {\n        return info.subject.asObservable();\n      }\n      /** @type {?} */\n\n\n      var result = new Subject();\n      /** @type {?} */\n\n      var cssClass = 'cdk-text-field-autofilled';\n      /** @type {?} */\n\n      var listener =\n      /** @type {?} */\n      function listener(event) {\n        // Animation events fire on initial element render, we check for the presence of the autofill\n        // CSS class to make sure this is a real change in state, not just the initial render before\n        // we fire off events.\n        if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n          element.classList.add(cssClass);\n\n          _this._ngZone.run(function () {\n            return result.next({\n              target:\n              /** @type {?} */\n              event.target,\n              isAutofilled: true\n            });\n          });\n        } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n          element.classList.remove(cssClass);\n\n          _this._ngZone.run(function () {\n            return result.next({\n              target:\n              /** @type {?} */\n              event.target,\n              isAutofilled: false\n            });\n          });\n        }\n      };\n\n      this._ngZone.runOutsideAngular(function () {\n        element.addEventListener('animationstart', listener, listenerOptions);\n        element.classList.add('cdk-text-field-autofill-monitored');\n      });\n\n      this._monitoredElements.set(element, {\n        subject: result,\n        unlisten: function unlisten() {\n          element.removeEventListener('animationstart', listener, listenerOptions);\n        }\n      });\n\n      return result.asObservable();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"stopMonitoring\",\n    value: function stopMonitoring(elementOrRef) {\n      /** @type {?} */\n      var element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n      /** @type {?} */\n\n      var info = this._monitoredElements.get(element);\n\n      if (info) {\n        info.unlisten();\n        info.subject.complete();\n        element.classList.remove('cdk-text-field-autofill-monitored');\n        element.classList.remove('cdk-text-field-autofilled');\n\n        this._monitoredElements.delete(element);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this2 = this;\n\n      this._monitoredElements.forEach(function (_info, element) {\n        return _this2.stopMonitoring(element);\n      });\n    }\n  }]);\n\n  return AutofillMonitor;\n}();\n\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n  return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nAutofillMonitor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: AutofillMonitor,\n  factory: AutofillMonitor.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nAutofillMonitor.ctorParameters = function () {\n  return [{\n    type: Platform\n  }, {\n    type: NgZone\n  }];\n};\n/** @nocollapse */\n\n\nAutofillMonitor.ngInjectableDef = defineInjectable({\n  factory: function AutofillMonitor_Factory() {\n    return new AutofillMonitor(inject(Platform), inject(NgZone));\n  },\n  token: AutofillMonitor,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\n\n\nvar CdkAutofill = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _autofillMonitor\n   */\n  function CdkAutofill(_elementRef, _autofillMonitor) {\n    _classCallCheck(this, CdkAutofill);\n\n    this._elementRef = _elementRef;\n    this._autofillMonitor = _autofillMonitor;\n    /**\n     * Emits when the autofill state of the element changes.\n     */\n\n    this.cdkAutofill = new EventEmitter();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkAutofill, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this3 = this;\n\n      this._autofillMonitor.monitor(this._elementRef).subscribe(function (event) {\n        return _this3.cdkAutofill.emit(event);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n  }]);\n\n  return CdkAutofill;\n}();\n\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n  return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor));\n};\n\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkAutofill,\n  selectors: [[\"\", \"cdkAutofill\", \"\"]],\n  outputs: {\n    cdkAutofill: \"cdkAutofill\"\n  }\n});\n/** @nocollapse */\n\nCdkAutofill.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: AutofillMonitor\n  }];\n};\n\nCdkAutofill.propDecorators = {\n  cdkAutofill: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAutofill]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: AutofillMonitor\n    }];\n  }, {\n    cdkAutofill: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n\n\nvar CdkTextareaAutosize = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _platform\n   * @param {?} _ngZone\n   */\n  function CdkTextareaAutosize(_elementRef, _platform, _ngZone) {\n    _classCallCheck(this, CdkTextareaAutosize);\n\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._destroyed = new Subject();\n    this._enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n\n    this._previousMinRows = -1;\n    this._textareaElement =\n    /** @type {?} */\n    this._elementRef.nativeElement;\n  }\n  /**\n   * Minimum amount of rows in the textarea.\n   * @return {?}\n   */\n\n\n  _createClass(CdkTextareaAutosize, [{\n    key: \"minRows\",\n    get: function get() {\n      return this._minRows;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minRows = value;\n\n      this._setMinHeight();\n    }\n    /**\n     * Maximum amount of rows in the textarea.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxRows\",\n    get: function get() {\n      return this._maxRows;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxRows = value;\n\n      this._setMaxHeight();\n    }\n    /**\n     * Whether autosizing is enabled or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      value = coerceBooleanProperty(value); // Only act if the actual value changed. This specifically helps to not run\n      // resizeToFitContent too early (i.e. before ngAfterViewInit)\n\n      if (this._enabled !== value) {\n        (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n      }\n    }\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setMinHeight\",\n    value: function _setMinHeight() {\n      /** @type {?} */\n      var minHeight = this.minRows && this._cachedLineHeight ? \"\".concat(this.minRows * this._cachedLineHeight, \"px\") : null;\n\n      if (minHeight) {\n        this._textareaElement.style.minHeight = minHeight;\n      }\n    }\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setMaxHeight\",\n    value: function _setMaxHeight() {\n      /** @type {?} */\n      var maxHeight = this.maxRows && this._cachedLineHeight ? \"\".concat(this.maxRows * this._cachedLineHeight, \"px\") : null;\n\n      if (maxHeight) {\n        this._textareaElement.style.maxHeight = maxHeight;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this4 = this;\n\n      if (this._platform.isBrowser) {\n        // Remember the height which we started with in case autosizing is disabled\n        this._initialHeight = this._textareaElement.style.height;\n        this.resizeToFitContent();\n\n        this._ngZone.runOutsideAngular(function () {\n          fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(_this4._destroyed)).subscribe(function () {\n            return _this4.resizeToFitContent(true);\n          });\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheTextareaLineHeight\",\n    value: function _cacheTextareaLineHeight() {\n      if (this._cachedLineHeight) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var textareaClone =\n      /** @type {?} */\n      this._textareaElement.cloneNode(false);\n\n      textareaClone.rows = 1; // Use `position: absolute` so that this doesn't cause a browser layout and use\n      // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n      // would affect the height.\n\n      textareaClone.style.position = 'absolute';\n      textareaClone.style.visibility = 'hidden';\n      textareaClone.style.border = 'none';\n      textareaClone.style.padding = '0';\n      textareaClone.style.height = '';\n      textareaClone.style.minHeight = '';\n      textareaClone.style.maxHeight = ''; // In Firefox it happens that textarea elements are always bigger than the specified amount\n      // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n      // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n      // to hidden. This ensures that there is no invalid calculation of the line height.\n      // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n\n      textareaClone.style.overflow = 'hidden';\n      /** @type {?} */\n\n      this._textareaElement.parentNode.appendChild(textareaClone);\n\n      this._cachedLineHeight = textareaClone.clientHeight;\n      /** @type {?} */\n\n      this._textareaElement.parentNode.removeChild(textareaClone); // Min and max heights have to be re-calculated if the cached line height changes\n\n\n      this._setMinHeight();\n\n      this._setMaxHeight();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this._platform.isBrowser) {\n        this.resizeToFitContent();\n      }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n\n  }, {\n    key: \"resizeToFitContent\",\n    value: function resizeToFitContent() {\n      var _this5 = this;\n\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // If autosizing is disabled, just skip everything else\n      if (!this._enabled) {\n        return;\n      }\n\n      this._cacheTextareaLineHeight(); // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n      // in checking the height of the textarea.\n\n\n      if (!this._cachedLineHeight) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var textarea =\n      /** @type {?} */\n      this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var value = textarea.value; // Only resize if the value or minRows have changed since these calculations can be expensive.\n\n      if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var placeholderText = textarea.placeholder; // Reset the textarea height to auto in order to shrink back to its default size.\n      // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n      // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n      // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n      // need to be removed temporarily.\n\n      textarea.classList.add('cdk-textarea-autosize-measuring');\n      textarea.placeholder = '';\n      /** @type {?} */\n\n      var height = textarea.scrollHeight - 4; // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n\n      textarea.style.height = \"\".concat(height, \"px\");\n      textarea.classList.remove('cdk-textarea-autosize-measuring');\n      textarea.placeholder = placeholderText; // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\n      // We need to re-set the selection in order for it to scroll to the proper position.\n\n      if (typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(function () {\n          return requestAnimationFrame(function () {\n            var selectionStart = textarea.selectionStart,\n                selectionEnd = textarea.selectionEnd; // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n            // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n            // between the time we requested the animation frame and when it was executed.\n            // Also note that we have to assert that the textarea is focused before we set the\n            // selection range. Setting the selection range on a non-focused textarea will cause\n            // it to receive focus on IE and Edge.\n\n            if (!_this5._destroyed.isStopped && document.activeElement === textarea) {\n              textarea.setSelectionRange(selectionStart, selectionEnd);\n            }\n          });\n        });\n      }\n\n      this._previousValue = value;\n      this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to it's original size\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // Do not try to change the textarea, if the initialHeight has not been determined yet\n      // This might potentially remove styles when reset() is called before ngAfterViewInit\n      if (this._initialHeight === undefined) {\n        return;\n      }\n\n      this._textareaElement.style.height = this._initialHeight;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_noopInputHandler\",\n    value: function _noopInputHandler() {// no-op handler that ensures we're running change detection on input events.\n    }\n  }]);\n\n  return CdkTextareaAutosize;\n}();\n\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n  return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTextareaAutosize,\n  selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n  hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n        return ctx._noopInputHandler();\n      });\n    }\n  },\n  inputs: {\n    minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n    maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n    enabled: [\"cdkTextareaAutosize\", \"enabled\"]\n  },\n  exportAs: [\"cdkTextareaAutosize\"]\n});\n/** @nocollapse */\n\nCdkTextareaAutosize.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkTextareaAutosize.propDecorators = {\n  minRows: [{\n    type: Input,\n    args: ['cdkAutosizeMinRows']\n  }],\n  maxRows: [{\n    type: Input,\n    args: ['cdkAutosizeMaxRows']\n  }],\n  enabled: [{\n    type: Input,\n    args: ['cdkTextareaAutosize']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[cdkTextareaAutosize]',\n      exportAs: 'cdkTextareaAutosize',\n      host: {\n        'class': 'cdk-textarea-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1',\n        '(input)': '_noopInputHandler()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    minRows: [{\n      type: Input,\n      args: ['cdkAutosizeMinRows']\n    }],\n    maxRows: [{\n      type: Input,\n      args: ['cdkAutosizeMaxRows']\n    }],\n    enabled: [{\n      type: Input,\n      args: ['cdkTextareaAutosize']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar TextFieldModule = function TextFieldModule() {\n  _classCallCheck(this, TextFieldModule);\n};\n\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TextFieldModule\n});\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TextFieldModule_Factory(t) {\n    return new (t || TextFieldModule)();\n  },\n  imports: [[PlatformModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, {\n    declarations: function declarations() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    },\n    imports: function imports() {\n      return [PlatformModule];\n    },\n    exports: function exports() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkAutofill, CdkTextareaAutosize],\n      imports: [PlatformModule],\n      exports: [CdkAutofill, CdkTextareaAutosize]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };","map":{"version":3,"sources":["../../../src/cdk/text-field/autofill.ts","../../../src/cdk/text-field/autosize.ts","../../../src/cdk/text-field/text-field-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {EMPTY, Observable, Subject} from 'rxjs';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({passive: true});\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable({providedIn: 'root'})\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform, private _ngZone: NgZone) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent>;\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\n\n  monitor(elementOrRef: Element | ElementRef<Element>): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return EMPTY;\n    }\n\n    const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const cssClass = 'cdk-text-field-autofilled';\n    const listener = ((event: AnimationEvent) => {\n      // Animation events fire on initial element render, we check for the presence of the autofill\n      // CSS class to make sure this is a real change in state, not just the initial render before\n      // we fire off events.\n      if (event.animationName === 'cdk-text-field-autofill-start' &&\n          !element.classList.contains(cssClass)) {\n        element.classList.add(cssClass);\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: true}));\n      } else if (event.animationName === 'cdk-text-field-autofill-end' &&\n          element.classList.contains(cssClass)) {\n        element.classList.remove(cssClass);\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: false}));\n      }\n    }) as EventListenerOrEventListenerObject;\n\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('animationstart', listener, listenerOptions);\n      element.classList.add('cdk-text-field-autofill-monitored');\n    });\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element): void;\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<Element>): void;\n\n  stopMonitoring(elementOrRef: Element | ElementRef<Element>): void {\n    const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[cdkAutofill]',\n})\nexport class CdkAutofill implements OnDestroy, OnInit {\n  /** Emits when the autofill state of the element changes. */\n  @Output() cdkAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef)\n      .subscribe(event => this.cdkAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from 'rxjs/operators';\nimport {fromEvent, Subject} from 'rxjs';\n\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue?: string;\n  private _initialHeight: string | null;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n  private _enabled: boolean = true;\n\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  private _previousMinRows: number = -1;\n\n  private _textareaElement: HTMLTextAreaElement;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  get minRows(): number { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Whether autosizing is enabled or not */\n  @Input('cdkTextareaAutosize')\n  get enabled(): boolean { return this._enabled; }\n  set enabled(value: boolean) {\n    value = coerceBooleanProperty(value);\n\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _platform: Platform,\n    private _ngZone: NgZone) {\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\n  }\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        fromEvent(window, 'resize')\n          .pipe(auditTime(16), takeUntil(this._destroyed))\n          .subscribe(() => this.resizeToFitContent(true));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    this._textareaElement.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    this._textareaElement.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.classList.add('cdk-textarea-autosize-measuring');\n    textarea.placeholder = '';\n\n    // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n    // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const height = textarea.scrollHeight - 4;\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n    textarea.classList.remove('cdk-textarea-autosize-measuring');\n    textarea.placeholder = placeholderText;\n\n    // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\n    // We need to re-set the selection in order for it to scroll to the proper position.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => requestAnimationFrame(() => {\n        const {selectionStart, selectionEnd} = textarea;\n\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n          textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n      }));\n    }\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n\n  /**\n   * Resets the textarea to it's original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight === undefined) {\n      return;\n    }\n    this._textareaElement.style.height = this._initialHeight;\n  }\n\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkAutofill} from './autofill';\nimport {CdkTextareaAutosize} from './autosize';\n\n\n@NgModule({\n  declarations: [CdkAutofill, CdkTextareaAutosize],\n  imports: [PlatformModule],\n  exports: [CdkAutofill, CdkTextareaAutosize],\n})\nexport class TextFieldModule {}\n"]},"metadata":{},"sourceType":"module"}