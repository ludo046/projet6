{"ast":null,"code":"import _get from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, InjectionToken, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * IDs are deliminated by an empty space, as per the spec.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nvar ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  var ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(function (existingId) {\n    return existingId.trim() == id.trim();\n  })) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  var ids = getAriaReferenceIds(el, attr);\n  /** @type {?} */\n\n  var filteredIds = ids.filter(function (val) {\n    return val != id.trim();\n  });\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * ID used for the body container where all messages are appended.\n  @type {?} */\n\n\nvar MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** *\n * ID prefix used for each created message element.\n  @type {?} */\n\nvar CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** *\n * Attribute given to each host element that is described by a message element.\n  @type {?} */\n\nvar CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** *\n * Global incremental identifier for each registered message element.\n  @type {?} */\n\nvar nextId = 0;\n/** *\n * Global map of all registered message elements that have been placed into the document.\n  @type {?} */\n\nvar messageRegistry = new Map();\n/** *\n * Container for all registered messages.\n  @type {?} */\n\nvar messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * \\@docs-private\n */\n\nvar AriaDescriber = /*#__PURE__*/function () {\n  /**\n   * @param {?} _document\n   */\n  function AriaDescriber(_document) {\n    _classCallCheck(this, AriaDescriber);\n\n    this._document = _document;\n  }\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   * @param {?} hostElement\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _createClass(AriaDescriber, [{\n    key: \"describe\",\n    value: function describe(hostElement, message) {\n      if (!this._canBeDescribed(hostElement, message)) {\n        return;\n      }\n\n      if (!messageRegistry.has(message)) {\n        this._createMessageElement(message);\n      }\n\n      if (!this._isElementDescribedByMessage(hostElement, message)) {\n        this._addMessageReference(hostElement, message);\n      }\n    }\n    /**\n     * Removes the host element's aria-describedby reference to the message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeDescription\",\n    value: function removeDescription(hostElement, message) {\n      if (!this._canBeDescribed(hostElement, message)) {\n        return;\n      }\n\n      if (this._isElementDescribedByMessage(hostElement, message)) {\n        this._removeMessageReference(hostElement, message);\n      }\n      /** @type {?} */\n\n\n      var registeredMessage = messageRegistry.get(message);\n\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(message);\n      }\n\n      if (messagesContainer && messagesContainer.childNodes.length === 0) {\n        this._deleteMessagesContainer();\n      }\n    }\n    /**\n     * Unregisters all created message elements and removes the message container.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      /** @type {?} */\n      var describedElements = this._document.querySelectorAll(\"[\".concat(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, \"]\"));\n\n      for (var i = 0; i < describedElements.length; i++) {\n        this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n      }\n\n      if (messagesContainer) {\n        this._deleteMessagesContainer();\n      }\n\n      messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createMessageElement\",\n    value: function _createMessageElement(message) {\n      /** @type {?} */\n      var messageElement = this._document.createElement('div');\n\n      messageElement.setAttribute('id', \"\".concat(CDK_DESCRIBEDBY_ID_PREFIX, \"-\").concat(nextId++));\n      messageElement.appendChild(\n      /** @type {?} */\n      this._document.createTextNode(message));\n\n      this._createMessagesContainer();\n      /** @type {?} */\n\n\n      messagesContainer.appendChild(messageElement);\n      messageRegistry.set(message, {\n        messageElement: messageElement,\n        referenceCount: 0\n      });\n    }\n    /**\n     * Deletes the message element from the global messages container.\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_deleteMessageElement\",\n    value: function _deleteMessageElement(message) {\n      /** @type {?} */\n      var registeredMessage = messageRegistry.get(message);\n      /** @type {?} */\n\n      var messageElement = registeredMessage && registeredMessage.messageElement;\n\n      if (messagesContainer && messageElement) {\n        messagesContainer.removeChild(messageElement);\n      }\n\n      messageRegistry.delete(message);\n    }\n    /**\n     * Creates the global container for all aria-describedby messages.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createMessagesContainer\",\n    value: function _createMessagesContainer() {\n      if (!messagesContainer) {\n        /** @type {?} */\n        var preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n        // already a container on the page, but we don't have a reference to it. Clear the\n        // old container so we don't get duplicates. Doing this, instead of emptying the previous\n        // container, should be slightly faster.\n\n\n        if (preExistingContainer) {\n          /** @type {?} */\n          preExistingContainer.parentNode.removeChild(preExistingContainer);\n        }\n\n        messagesContainer = this._document.createElement('div');\n        messagesContainer.id = MESSAGES_CONTAINER_ID;\n        messagesContainer.setAttribute('aria-hidden', 'true');\n        messagesContainer.style.display = 'none';\n\n        this._document.body.appendChild(messagesContainer);\n      }\n    }\n    /**\n     * Deletes the global messages container.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_deleteMessagesContainer\",\n    value: function _deleteMessagesContainer() {\n      if (messagesContainer && messagesContainer.parentNode) {\n        messagesContainer.parentNode.removeChild(messagesContainer);\n        messagesContainer = null;\n      }\n    }\n    /**\n     * Removes all cdk-describedby messages that are hosted through the element.\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeCdkDescribedByReferenceIds\",\n    value: function _removeCdkDescribedByReferenceIds(element) {\n      /** @type {?} */\n      var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(function (id) {\n        return id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0;\n      });\n      element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addMessageReference\",\n    value: function _addMessageReference(element, message) {\n      /** @type {?} */\n      var registeredMessage =\n      /** @type {?} */\n      messageRegistry.get(message); // Add the aria-describedby reference and set the\n      // describedby_host attribute to mark the element.\n\n      addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n      registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeMessageReference\",\n    value: function _removeMessageReference(element, message) {\n      /** @type {?} */\n      var registeredMessage =\n      /** @type {?} */\n      messageRegistry.get(message);\n      registeredMessage.referenceCount--;\n      removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /**\n     * Returns true if the element has been described by the provided message ID.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isElementDescribedByMessage\",\n    value: function _isElementDescribedByMessage(element, message) {\n      /** @type {?} */\n      var referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n      /** @type {?} */\n\n      var registeredMessage = messageRegistry.get(message);\n      /** @type {?} */\n\n      var messageId = registeredMessage && registeredMessage.messageElement.id;\n      return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /**\n     * Determines whether a message can be described on a particular element.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canBeDescribed\",\n    value: function _canBeDescribed(element, message) {\n      return element.nodeType === this._document.ELEMENT_NODE && message != null && !!\"\".concat(message).trim();\n    }\n  }]);\n\n  return AriaDescriber;\n}();\n\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nAriaDescriber.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: AriaDescriber,\n  factory: AriaDescriber.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nAriaDescriber.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nAriaDescriber.ngInjectableDef = defineInjectable({\n  factory: function AriaDescriber_Factory() {\n    return new AriaDescriber(inject(DOCUMENT));\n  },\n  token: AriaDescriber,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n  return parentDispatcher || new AriaDescriber(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [[new Optional(), new SkipSelf(), AriaDescriber],\n  /** @type {?} */\n  DOCUMENT],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// unsupported: template constraints.\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\n\nvar ListKeyManager = /*#__PURE__*/function () {\n  /**\n   * @param {?} _items\n   */\n  function ListKeyManager(_items) {\n    var _this = this;\n\n    _classCallCheck(this, ListKeyManager);\n\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn = function (item) {\n      return item.disabled;\n    };\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /**\n     * Stream that emits whenever the active item of the list manager changes.\n     */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(function (newItems) {\n        if (_this._activeItem) {\n          /** @type {?} */\n          var itemArray = newItems.toArray();\n          /** @type {?} */\n\n          var newIndex = itemArray.indexOf(_this._activeItem);\n\n          if (newIndex > -1 && newIndex !== _this._activeItemIndex) {\n            _this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param {?} predicate Function that determines whether the given item should be skipped.\n   * @return {?}\n   */\n\n\n  _createClass(ListKeyManager, [{\n    key: \"skipPredicate\",\n    value: function skipPredicate(predicate) {\n      this._skipPredicateFn = predicate;\n      return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withWrap\",\n    value: function withWrap() {\n      var shouldWrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._wrap = shouldWrap;\n      return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param {?=} enabled Whether vertical selection should be enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withVerticalOrientation\",\n    value: function withVerticalOrientation() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._vertical = enabled;\n      return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param {?} direction Direction in which the selection can be moved.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withHorizontalOrientation\",\n    value: function withHorizontalOrientation(direction) {\n      this._horizontal = direction;\n      return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withTypeAhead\",\n    value: function withTypeAhead() {\n      var _this2 = this;\n\n      var debounceInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n\n      if (this._items.length && this._items.some(function (item) {\n        return typeof item.getLabel !== 'function';\n      })) {\n        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n      }\n\n      this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n      // and convert those letters back into a string. Afterwards find the first item that starts\n      // with that string and select it.\n\n\n      this._typeaheadSubscription = this._letterKeyStream.pipe(tap(function (keyCode) {\n        return _this2._pressedLetters.push(keyCode);\n      }), debounceTime(debounceInterval), filter(function () {\n        return _this2._pressedLetters.length > 0;\n      }), map(function () {\n        return _this2._pressedLetters.join('');\n      })).subscribe(function (inputString) {\n        /** @type {?} */\n        var items = _this2._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n\n\n        for (var i = 1; i < items.length + 1; i++) {\n          /** @type {?} */\n          var index = (_this2._activeItemIndex + i) % items.length;\n          /** @type {?} */\n\n          var item = items[index];\n\n          if (!_this2._skipPredicateFn(item) &&\n          /** @type {?} */\n          item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n            _this2.setActiveItem(index);\n\n            break;\n          }\n        }\n\n        _this2._pressedLetters = [];\n      });\n      return this;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      /** @type {?} */\n      var previousIndex = this._activeItemIndex;\n      this.updateActiveItem(item);\n\n      if (this._activeItemIndex !== previousIndex) {\n        this.change.next(this._activeItemIndex);\n      }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param {?} event Keyboard event to be used for determining which element should be active.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n\n      switch (keyCode) {\n        case TAB:\n          this.tabOut.next();\n          return;\n\n        case DOWN_ARROW:\n          if (this._vertical) {\n            this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case UP_ARROW:\n          if (this._vertical) {\n            this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case RIGHT_ARROW:\n          if (this._horizontal === 'ltr') {\n            this.setNextItemActive();\n            break;\n          } else if (this._horizontal === 'rtl') {\n            this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case LEFT_ARROW:\n          if (this._horizontal === 'ltr') {\n            this.setPreviousItemActive();\n            break;\n          } else if (this._horizontal === 'rtl') {\n            this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        default:\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          } // Note that we return here, in order to avoid preventing\n          // the default action of non-navigational keys.\n\n\n          return;\n      }\n\n      this._pressedLetters = [];\n      event.preventDefault();\n    }\n    /**\n     * Index of the currently active item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"activeItemIndex\",\n    get: function get() {\n      return this._activeItemIndex;\n    }\n    /**\n     * The active item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"activeItem\",\n    get: function get() {\n      return this._activeItem;\n    }\n    /**\n     * Sets the active item to the first enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setFirstItemActive\",\n    value: function setFirstItemActive() {\n      this._setActiveItemByIndex(0, 1);\n    }\n    /**\n     * Sets the active item to the last enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setLastItemActive\",\n    value: function setLastItemActive() {\n      this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /**\n     * Sets the active item to the next enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setNextItemActive\",\n    value: function setNextItemActive() {\n      this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /**\n     * Sets the active item to a previous enabled item in the list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setPreviousItemActive\",\n    value: function setPreviousItemActive() {\n      this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateActiveItem\",\n    value: function updateActiveItem(item) {\n      /** @type {?} */\n      var itemArray = this._getItemsArray();\n      /** @type {?} */\n\n\n      var index = typeof item === 'number' ? item : itemArray.indexOf(item);\n      this._activeItemIndex = index;\n      this._activeItem = itemArray[index];\n    }\n    /**\n     * Allows setting of the activeItemIndex without any other effects.\n     * @deprecated Use `updateActiveItem` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} index The new activeItemIndex.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateActiveItemIndex\",\n    value: function updateActiveItemIndex(index) {\n      this.updateActiveItem(index);\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     * @param {?} delta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveItemByDelta\",\n    value: function _setActiveItemByDelta(delta) {\n      this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     * @param {?} delta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveInWrapMode\",\n    value: function _setActiveInWrapMode(delta) {\n      /** @type {?} */\n      var items = this._getItemsArray();\n\n      for (var i = 1; i <= items.length; i++) {\n        /** @type {?} */\n        var index = (this._activeItemIndex + delta * i + items.length) % items.length;\n        /** @type {?} */\n\n        var item = items[index];\n\n        if (!this._skipPredicateFn(item)) {\n          this.setActiveItem(index);\n          return;\n        }\n      }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     * @param {?} delta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveInDefaultMode\",\n    value: function _setActiveInDefaultMode(delta) {\n      this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     * @param {?} index\n     * @param {?} fallbackDelta\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setActiveItemByIndex\",\n    value: function _setActiveItemByIndex(index, fallbackDelta) {\n      /** @type {?} */\n      var items = this._getItemsArray();\n\n      if (!items[index]) {\n        return;\n      }\n\n      while (this._skipPredicateFn(items[index])) {\n        index += fallbackDelta;\n\n        if (!items[index]) {\n          return;\n        }\n      }\n\n      this.setActiveItem(index);\n    }\n    /**\n     * Returns the items as an array.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemsArray\",\n    value: function _getItemsArray() {\n      return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n  }]);\n\n  return ListKeyManager;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nvar ActiveDescendantKeyManager = /*#__PURE__*/function (_ListKeyManager) {\n  _inherits(ActiveDescendantKeyManager, _ListKeyManager);\n\n  var _super = _createSuper(ActiveDescendantKeyManager);\n\n  function ActiveDescendantKeyManager() {\n    _classCallCheck(this, ActiveDescendantKeyManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ActiveDescendantKeyManager, [{\n    key: \"setActiveItem\",\n    value:\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    function setActiveItem(index) {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n\n      _get(_getPrototypeOf(ActiveDescendantKeyManager.prototype), \"setActiveItem\", this).call(this, index);\n\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    }\n  }]);\n\n  return ActiveDescendantKeyManager;\n}(ListKeyManager);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nvar FocusKeyManager = /*#__PURE__*/function (_ListKeyManager2) {\n  _inherits(FocusKeyManager, _ListKeyManager2);\n\n  var _super2 = _createSuper(FocusKeyManager);\n\n  function FocusKeyManager() {\n    var _this3;\n\n    _classCallCheck(this, FocusKeyManager);\n\n    _this3 = _super2.apply(this, arguments);\n    _this3._origin = 'program';\n    return _this3;\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param {?} origin Focus origin to be used when focusing items.\n   * @return {?}\n   */\n\n\n  _createClass(FocusKeyManager, [{\n    key: \"setFocusOrigin\",\n    value: function setFocusOrigin(origin) {\n      this._origin = origin;\n      return this;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      _get(_getPrototypeOf(FocusKeyManager.prototype), \"setActiveItem\", this).call(this, item);\n\n      if (this.activeItem) {\n        this.activeItem.focus(this._origin);\n      }\n    }\n  }]);\n\n  return FocusKeyManager;\n}(ListKeyManager);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n\n\nvar InteractivityChecker = /*#__PURE__*/function () {\n  /**\n   * @param {?} _platform\n   */\n  function InteractivityChecker(_platform) {\n    _classCallCheck(this, InteractivityChecker);\n\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is disabled.\n   */\n\n\n  _createClass(InteractivityChecker, [{\n    key: \"isDisabled\",\n    value: function isDisabled(element) {\n      // This does not capture some cases, such as a non-form control with a disabled attribute or\n      // a form control inside of a disabled form, but should capture the most common cases.\n      return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @param {?} element\n     * @return {?} Whether the element is visible.\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible(element) {\n      return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is tabbable.\n     */\n\n  }, {\n    key: \"isTabbable\",\n    value: function isTabbable(element) {\n      // Nothing is tabbable on the the server 😎\n      if (!this._platform.isBrowser) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var frameElement = getFrameElement(getWindow(element));\n\n      if (frameElement) {\n        /** @type {?} */\n        var frameType = frameElement && frameElement.nodeName.toLowerCase(); // Frame elements inherit their tabindex onto all child elements.\n\n        if (getTabIndexValue(frameElement) === -1) {\n          return false;\n        } // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n\n\n        if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n          return false;\n        } // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n\n\n        if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n          return false;\n        }\n      }\n      /** @type {?} */\n\n\n      var nodeName = element.nodeName.toLowerCase();\n      /** @type {?} */\n\n      var tabIndexValue = getTabIndexValue(element);\n\n      if (element.hasAttribute('contenteditable')) {\n        return tabIndexValue !== -1;\n      }\n\n      if (nodeName === 'iframe') {\n        // The frames may be tabbable depending on content, but it's not possibly to reliably\n        // investigate the content of the frames.\n        return false;\n      }\n\n      if (nodeName === 'audio') {\n        if (!element.hasAttribute('controls')) {\n          // By default an <audio> element without the controls enabled is not tabbable.\n          return false;\n        } else if (this._platform.BLINK) {\n          // In Blink <audio controls> elements are always tabbable.\n          return true;\n        }\n      }\n\n      if (nodeName === 'video') {\n        if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n          // In Trident a <video> element without the controls enabled is not tabbable.\n          return false;\n        } else if (this._platform.BLINK || this._platform.FIREFOX) {\n          // In Chrome and Firefox <video controls> elements are always tabbable.\n          return true;\n        }\n      }\n\n      if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n        // In all Blink and WebKit based browsers <object> elements are never tabbable.\n        return false;\n      } // In iOS the browser only considers some specific elements as tabbable.\n\n\n      if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n        return false;\n      }\n\n      return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is focusable.\n     */\n\n  }, {\n    key: \"isFocusable\",\n    value: function isFocusable(element) {\n      // Perform checks in order of left to most expensive.\n      // Again, naive approach that does not capture many edge cases and browser quirks.\n      return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n    }\n  }]);\n\n  return InteractivityChecker;\n}();\n\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nInteractivityChecker.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: InteractivityChecker,\n  factory: InteractivityChecker.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nInteractivityChecker.ctorParameters = function () {\n  return [{\n    type: Platform\n  }];\n};\n/** @nocollapse */\n\n\nInteractivityChecker.ngInjectableDef = defineInjectable({\n  factory: function InteractivityChecker_Factory() {\n    return new InteractivityChecker(inject(Platform));\n  },\n  token: InteractivityChecker,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return (\n      /** @type {?} */\n      window.frameElement\n    );\n  } catch (_a) {\n    return null;\n  }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isNativeFormElement(element) {\n  /** @type {?} */\n  var nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  /** @type {?} */\n\n\n  var tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n  /** @type {?} */\n\n\n  var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  /** @type {?} */\n  var nodeName = element.nodeName.toLowerCase();\n  /** @type {?} */\n\n  var inputType = nodeName === 'input' &&\n  /** @type {?} */\n  element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\n\n\nvar FocusTrap = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?=} deferAnchors\n   */\n  function FocusTrap(_element, _checker, _ngZone, _document) {\n    var deferAnchors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, FocusTrap);\n\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false;\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n\n\n  _createClass(FocusTrap, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._enabled = value;\n\n      if (this._startAnchor && this._endAnchor) {\n        this._toggleAnchorTabIndex(value, this._startAnchor);\n\n        this._toggleAnchorTabIndex(value, this._endAnchor);\n      }\n    }\n    /**\n     * Destroys the focus trap by cleaning up the anchors.\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._startAnchor && this._startAnchor.parentNode) {\n        this._startAnchor.parentNode.removeChild(this._startAnchor);\n      }\n\n      if (this._endAnchor && this._endAnchor.parentNode) {\n        this._endAnchor.parentNode.removeChild(this._endAnchor);\n      }\n\n      this._startAnchor = this._endAnchor = null;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n\n  }, {\n    key: \"attachAnchors\",\n    value: function attachAnchors() {\n      var _this4 = this;\n\n      // If we're not on the browser, there can be no focus to trap.\n      if (this._hasAttached) {\n        return true;\n      }\n\n      this._ngZone.runOutsideAngular(function () {\n        if (!_this4._startAnchor) {\n          _this4._startAnchor = _this4._createAnchor();\n          /** @type {?} */\n\n          _this4._startAnchor.addEventListener('focus', function () {\n            return _this4.focusLastTabbableElement();\n          });\n        }\n\n        if (!_this4._endAnchor) {\n          _this4._endAnchor = _this4._createAnchor();\n          /** @type {?} */\n\n          _this4._endAnchor.addEventListener('focus', function () {\n            return _this4.focusFirstTabbableElement();\n          });\n        }\n      });\n\n      if (this._element.parentNode) {\n        this._element.parentNode.insertBefore(\n        /** @type {?} */\n        this._startAnchor, this._element);\n\n        this._element.parentNode.insertBefore(\n        /** @type {?} */\n        this._endAnchor, this._element.nextSibling);\n\n        this._hasAttached = true;\n      }\n\n      return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusInitialElementWhenReady\",\n    value: function focusInitialElementWhenReady() {\n      var _this5 = this;\n\n      return new Promise(function (resolve) {\n        _this5._executeOnStable(function () {\n          return resolve(_this5.focusInitialElement());\n        });\n      });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusFirstTabbableElementWhenReady\",\n    value: function focusFirstTabbableElementWhenReady() {\n      var _this6 = this;\n\n      return new Promise(function (resolve) {\n        _this6._executeOnStable(function () {\n          return resolve(_this6.focusFirstTabbableElement());\n        });\n      });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusLastTabbableElementWhenReady\",\n    value: function focusLastTabbableElementWhenReady() {\n      var _this7 = this;\n\n      return new Promise(function (resolve) {\n        _this7._executeOnStable(function () {\n          return resolve(_this7.focusLastTabbableElement());\n        });\n      });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param {?} bound The boundary to get (start or end of trapped region).\n     * @return {?} The boundary element.\n     */\n\n  }, {\n    key: \"_getRegionBoundary\",\n    value: function _getRegionBoundary(bound) {\n      /** @type {?} */\n      var markers =\n      /** @type {?} */\n      this._element.querySelectorAll(\"[cdk-focus-region-\".concat(bound, \"], \") + \"[cdkFocusRegion\".concat(bound, \"], \") + \"[cdk-focus-\".concat(bound, \"]\"));\n\n      for (var i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(\"cdk-focus-\".concat(bound))) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated \") + \"attribute will be removed in 8.0.0.\", markers[i]);\n        } else if (markers[i].hasAttribute(\"cdk-focus-region-\".concat(bound))) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-region-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated attribute \") + \"will be removed in 8.0.0.\", markers[i]);\n        }\n      }\n\n      if (bound == 'start') {\n        return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n      }\n\n      return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @return {?} Whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusInitialElement\",\n    value: function focusInitialElement() {\n      /** @type {?} */\n      var redirectToElement =\n      /** @type {?} */\n      this._element.querySelector(\"[cdk-focus-initial], \" + \"[cdkFocusInitial]\");\n\n      if (redirectToElement) {\n        // @breaking-change 8.0.0\n        if (redirectToElement.hasAttribute(\"cdk-focus-initial\")) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-initial', \" + \"use 'cdkFocusInitial' instead. The deprecated attribute \" + \"will be removed in 8.0.0\", redirectToElement);\n        }\n\n        redirectToElement.focus();\n        return true;\n      }\n\n      return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusFirstTabbableElement\",\n    value: function focusFirstTabbableElement() {\n      /** @type {?} */\n      var redirectToElement = this._getRegionBoundary('start');\n\n      if (redirectToElement) {\n        redirectToElement.focus();\n      }\n\n      return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n\n  }, {\n    key: \"focusLastTabbableElement\",\n    value: function focusLastTabbableElement() {\n      /** @type {?} */\n      var redirectToElement = this._getRegionBoundary('end');\n\n      if (redirectToElement) {\n        redirectToElement.focus();\n      }\n\n      return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfuly been attached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._hasAttached;\n    }\n    /**\n     * Get the first tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getFirstTabbableElement\",\n    value: function _getFirstTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      }\n      /** @type {?} */\n\n\n      var children = root.children || root.childNodes;\n\n      for (var i = 0; i < children.length; i++) {\n        /** @type {?} */\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(\n        /** @type {?} */\n        children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Get the last tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getLastTabbableElement\",\n    value: function _getLastTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      }\n      /** @type {?} */\n\n\n      var children = root.children || root.childNodes;\n\n      for (var i = children.length - 1; i >= 0; i--) {\n        /** @type {?} */\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(\n        /** @type {?} */\n        children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Creates an anchor element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createAnchor\",\n    value: function _createAnchor() {\n      /** @type {?} */\n      var anchor = this._document.createElement('div');\n\n      this._toggleAnchorTabIndex(this._enabled, anchor);\n\n      anchor.classList.add('cdk-visually-hidden');\n      anchor.classList.add('cdk-focus-trap-anchor');\n      return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param {?} isEnabled Whether the focus trap is enabled.\n     * @param {?} anchor Anchor on which to toggle the tabindex.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleAnchorTabIndex\",\n    value: function _toggleAnchorTabIndex(isEnabled, anchor) {\n      // Remove the tabindex completely, rather than setting it to -1, because if the\n      // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n      isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Executes a function when the zone is stable.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"_executeOnStable\",\n    value: function _executeOnStable(fn) {\n      if (this._ngZone.isStable) {\n        fn();\n      } else {\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n      }\n    }\n  }]);\n\n  return FocusTrap;\n}();\n/**\n * Factory that allows easy instantiation of focus traps.\n */\n\n\nvar FocusTrapFactory = /*#__PURE__*/function () {\n  /**\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  function FocusTrapFactory(_checker, _ngZone, _document) {\n    _classCallCheck(this, FocusTrapFactory);\n\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param {?} element The element around which focus will be trapped.\n   * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @return {?} The created focus trap instance.\n   */\n\n\n  _createClass(FocusTrapFactory, [{\n    key: \"create\",\n    value: function create(element) {\n      var deferCaptureElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n  }]);\n\n  return FocusTrapFactory;\n}();\n\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFocusTrapFactory.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: FocusTrapFactory,\n  factory: FocusTrapFactory.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nFocusTrapFactory.ctorParameters = function () {\n  return [{\n    type: InteractivityChecker\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nFocusTrapFactory.ngInjectableDef = defineInjectable({\n  factory: function FocusTrapFactory_Factory() {\n    return new FocusTrapFactory(inject(InteractivityChecker), inject(NgZone), inject(DOCUMENT));\n  },\n  token: FocusTrapFactory,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Directive for trapping focus within a region.\n */\n\n\nvar CdkTrapFocus = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _document\n   */\n  function CdkTrapFocus(_elementRef, _focusTrapFactory, _document) {\n    _classCallCheck(this, CdkTrapFocus);\n\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /**\n     * Previously focused element to restore focus to upon destroy when using autoCapture.\n     */\n\n    this._previouslyFocusedElement = null;\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n\n\n  _createClass(CdkTrapFocus, [{\n    key: \"enabled\",\n    get: function get() {\n      return this.focusTrap.enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatially move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     * @return {?}\n     */\n\n  }, {\n    key: \"autoCapture\",\n    get: function get() {\n      return this._autoCapture;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._autoCapture = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n      // element now that the trapped region is being destroyed.\n\n      if (this._previouslyFocusedElement) {\n        this._previouslyFocusedElement.focus();\n\n        this._previouslyFocusedElement = null;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this.focusTrap.attachAnchors();\n\n      if (this.autoCapture) {\n        this._previouslyFocusedElement =\n        /** @type {?} */\n        this._document.activeElement;\n        this.focusTrap.focusInitialElementWhenReady();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (!this.focusTrap.hasAttached()) {\n        this.focusTrap.attachAnchors();\n      }\n    }\n  }]);\n\n  return CdkTrapFocus;\n}();\n\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n  return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nCdkTrapFocus.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTrapFocus,\n  selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"cdkTrapFocus\"]\n});\n/** @nocollapse */\n\nCdkTrapFocus.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusTrapFactory\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nCdkTrapFocus.propDecorators = {\n  enabled: [{\n    type: Input,\n    args: ['cdkTrapFocus']\n  }],\n  autoCapture: [{\n    type: Input,\n    args: ['cdkTrapFocusAutoCapture']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTrapFocus]',\n      exportAs: 'cdkTrapFocus'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar LiveAnnouncer = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementToken\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  function LiveAnnouncer(elementToken, _ngZone, _document) {\n    _classCallCheck(this, LiveAnnouncer);\n\n    this._ngZone = _ngZone; // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n  /**\n   * Announces a message to screenreaders.\n   * @param {?} message Message to be announced to the screenreader\n   * @param {?=} politeness The politeness of the announcer element\n   * @return {?} Promise that will be resolved when the message is added to the DOM.\n   */\n\n\n  _createClass(LiveAnnouncer, [{\n    key: \"announce\",\n    value: function announce(message) {\n      var _this8 = this;\n\n      var politeness = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'polite';\n      this._liveElement.textContent = ''; // TODO: ensure changing the politeness works on all environments we support.\n\n      this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n      // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n      // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n      //   second time without clearing and then using a non-zero delay.\n      // (using JAWS 17 at time of this writing).\n\n\n      return this._ngZone.runOutsideAngular(function () {\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            _this8._liveElement.textContent = message;\n            resolve();\n          }, 100);\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._liveElement && this._liveElement.parentNode) {\n        this._liveElement.parentNode.removeChild(this._liveElement);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createLiveElement\",\n    value: function _createLiveElement() {\n      /** @type {?} */\n      var elementClass = 'cdk-live-announcer-element';\n      /** @type {?} */\n\n      var previousElements = this._document.getElementsByClassName(elementClass);\n      /** @type {?} */\n\n\n      var liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n      for (var i = 0; i < previousElements.length; i++) {\n        /** @type {?} */\n        previousElements[i].parentNode.removeChild(previousElements[i]);\n      }\n\n      liveEl.classList.add(elementClass);\n      liveEl.classList.add('cdk-visually-hidden');\n      liveEl.setAttribute('aria-atomic', 'true');\n      liveEl.setAttribute('aria-live', 'polite');\n\n      this._document.body.appendChild(liveEl);\n\n      return liveEl;\n    }\n  }]);\n\n  return LiveAnnouncer;\n}();\n\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nLiveAnnouncer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: LiveAnnouncer,\n  factory: LiveAnnouncer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nLiveAnnouncer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nLiveAnnouncer.ngInjectableDef = defineInjectable({\n  factory: function LiveAnnouncer_Factory() {\n    return new LiveAnnouncer(inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), inject(NgZone), inject(DOCUMENT));\n  },\n  token: LiveAnnouncer,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n\n\nvar CdkAriaLive = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _liveAnnouncer\n   * @param {?} _contentObserver\n   * @param {?} _ngZone\n   */\n  function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    _classCallCheck(this, CdkAriaLive);\n\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'off';\n  }\n  /**\n   * The aria-live politeness level to use when announcing messages.\n   * @return {?}\n   */\n\n\n  _createClass(CdkAriaLive, [{\n    key: \"politeness\",\n    get: function get() {\n      return this._politeness;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var _this9 = this;\n\n      this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n\n      if (this._politeness === 'off') {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n\n          this._subscription = null;\n        }\n      } else if (!this._subscription) {\n        this._subscription = this._ngZone.runOutsideAngular(function () {\n          return _this9._contentObserver.observe(_this9._elementRef).subscribe(function () {\n            /** @type {?} */\n            var element = _this9._elementRef.nativeElement;\n\n            _this9._liveAnnouncer.announce(element.textContent, _this9._politeness);\n          });\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return CdkAriaLive;\n}();\n\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n  return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkAriaLive.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkAriaLive,\n  selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n  inputs: {\n    politeness: [\"cdkAriaLive\", \"politeness\"]\n  },\n  exportAs: [\"cdkAriaLive\"]\n});\n/** @nocollapse */\n\nCdkAriaLive.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: LiveAnnouncer\n  }, {\n    type: ContentObserver\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkAriaLive.propDecorators = {\n  politeness: [{\n    type: Input,\n    args: ['cdkAriaLive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAriaLive]',\n      exportAs: 'cdkAriaLive'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: ɵngcc2.ContentObserver\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    politeness: [{\n      type: Input,\n      args: ['cdkAriaLive']\n    }]\n  });\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\n\n\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher, liveElement, _document, ngZone) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, _document, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [[new Optional(), new SkipSelf(), LiveAnnouncer], [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)], DOCUMENT, NgZone],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar TOUCH_BUFFER_MS = 650;\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\n\nvar FocusMonitor = /*#__PURE__*/function () {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  function FocusMonitor(_ngZone, _platform) {\n    _classCallCheck(this, FocusMonitor);\n\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * The focus origin that the next focus event is a result of.\n     */\n\n    this._origin = null;\n    /**\n     * Whether the window has just been focused.\n     */\n\n    this._windowFocused = false;\n    /**\n     * Map of elements being monitored to their info.\n     */\n\n    this._elementInfo = new Map();\n    /**\n     * A map of global objects to lists of current listeners.\n     */\n\n    this._unregisterGlobalListeners = function () {};\n    /**\n     * The number of elements currently being monitored.\n     */\n\n\n    this._monitoredElementCount = 0;\n  }\n  /**\n   * @param {?} element\n   * @param {?=} checkChildren\n   * @return {?}\n   */\n\n\n  _createClass(FocusMonitor, [{\n    key: \"monitor\",\n    value: function monitor(element) {\n      var _this10 = this;\n\n      var checkChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      // Do nothing if we're not on the browser platform.\n      if (!this._platform.isBrowser) {\n        return of(null);\n      }\n      /** @type {?} */\n\n\n      var nativeElement = this._getNativeElement(element); // Check if we're already monitoring this element.\n\n\n      if (this._elementInfo.has(nativeElement)) {\n        /** @type {?} */\n        var cachedInfo = this._elementInfo.get(nativeElement);\n        /** @type {?} */\n\n\n        cachedInfo.checkChildren = checkChildren;\n        return (\n          /** @type {?} */\n          cachedInfo.subject.asObservable()\n        );\n      }\n      /** @type {?} */\n\n\n      var info = {\n        unlisten: function unlisten() {},\n        checkChildren: checkChildren,\n        subject: new Subject()\n      };\n\n      this._elementInfo.set(nativeElement, info);\n\n      this._incrementMonitoredElementCount();\n      /** @type {?} */\n\n\n      var focusListener = function focusListener(event) {\n        return _this10._onFocus(event, nativeElement);\n      };\n      /** @type {?} */\n\n\n      var blurListener = function blurListener(event) {\n        return _this10._onBlur(event, nativeElement);\n      };\n\n      this._ngZone.runOutsideAngular(function () {\n        nativeElement.addEventListener('focus', focusListener, true);\n        nativeElement.addEventListener('blur', blurListener, true);\n      }); // Create an unlisten function for later.\n\n\n      info.unlisten = function () {\n        nativeElement.removeEventListener('focus', focusListener, true);\n        nativeElement.removeEventListener('blur', blurListener, true);\n      };\n\n      return info.subject.asObservable();\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"stopMonitoring\",\n    value: function stopMonitoring(element) {\n      /** @type {?} */\n      var nativeElement = this._getNativeElement(element);\n      /** @type {?} */\n\n\n      var elementInfo = this._elementInfo.get(nativeElement);\n\n      if (elementInfo) {\n        elementInfo.unlisten();\n        elementInfo.subject.complete();\n\n        this._setClasses(nativeElement);\n\n        this._elementInfo.delete(nativeElement);\n\n        this._decrementMonitoredElementCount();\n      }\n    }\n    /**\n     * @param {?} element\n     * @param {?} origin\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"focusVia\",\n    value: function focusVia(element, origin, options) {\n      /** @type {?} */\n      var nativeElement = this._getNativeElement(element);\n\n      this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server\n\n\n      if (typeof nativeElement.focus === 'function') {\n        // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n\n        /** @type {?} */\n        nativeElement.focus(options);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this11 = this;\n\n      this._elementInfo.forEach(function (_info, element) {\n        return _this11.stopMonitoring(element);\n      });\n    }\n    /**\n     * Register necessary event listeners on the document and window.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerGlobalListeners\",\n    value: function _registerGlobalListeners() {\n      var _this12 = this;\n\n      // Do nothing if we're not on the browser platform.\n      if (!this._platform.isBrowser) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var documentKeydownListener = function documentKeydownListener() {\n        _this12._lastTouchTarget = null;\n\n        _this12._setOriginForCurrentEventQueue('keyboard');\n      };\n      /** @type {?} */\n\n\n      var documentMousedownListener = function documentMousedownListener() {\n        if (!_this12._lastTouchTarget) {\n          _this12._setOriginForCurrentEventQueue('mouse');\n        }\n      };\n      /** @type {?} */\n\n\n      var documentTouchstartListener = function documentTouchstartListener(event) {\n        if (_this12._touchTimeoutId != null) {\n          clearTimeout(_this12._touchTimeoutId);\n        }\n\n        _this12._lastTouchTarget = event.target;\n        _this12._touchTimeoutId = setTimeout(function () {\n          return _this12._lastTouchTarget = null;\n        }, TOUCH_BUFFER_MS);\n      };\n      /** @type {?} */\n\n\n      var windowFocusListener = function windowFocusListener() {\n        _this12._windowFocused = true;\n        _this12._windowFocusTimeoutId = setTimeout(function () {\n          return _this12._windowFocused = false;\n        });\n      };\n      /** @type {?} */\n\n\n      var captureEventListenerOptions = normalizePassiveListenerOptions({\n        passive: true,\n        capture: true\n      }); // Note: we listen to events in the capture phase so we can detect them even if the user stops\n      // propagation.\n\n      this._ngZone.runOutsideAngular(function () {\n        document.addEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n        document.addEventListener('mousedown', documentMousedownListener, captureEventListenerOptions);\n        document.addEventListener('touchstart', documentTouchstartListener, captureEventListenerOptions);\n        window.addEventListener('focus', windowFocusListener);\n      });\n\n      this._unregisterGlobalListeners = function () {\n        document.removeEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n        document.removeEventListener('mousedown', documentMousedownListener, captureEventListenerOptions);\n        document.removeEventListener('touchstart', documentTouchstartListener, captureEventListenerOptions);\n        window.removeEventListener('focus', windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n        clearTimeout(_this12._windowFocusTimeoutId);\n        clearTimeout(_this12._touchTimeoutId);\n        clearTimeout(_this12._originTimeoutId);\n      };\n    }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @param {?} shouldSet\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleClass\",\n    value: function _toggleClass(element, className, shouldSet) {\n      if (shouldSet) {\n        element.classList.add(className);\n      } else {\n        element.classList.remove(className);\n      }\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param {?} element The element to update the classes on.\n     * @param {?=} origin The focus origin.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setClasses\",\n    value: function _setClasses(element, origin) {\n      /** @type {?} */\n      var elementInfo = this._elementInfo.get(element);\n\n      if (elementInfo) {\n        this._toggleClass(element, 'cdk-focused', !!origin);\n\n        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n        this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n      }\n    }\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param {?} origin The origin to set.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setOriginForCurrentEventQueue\",\n    value: function _setOriginForCurrentEventQueue(origin) {\n      var _this13 = this;\n\n      this._ngZone.runOutsideAngular(function () {\n        _this13._origin = origin; // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n        // tick after the interaction event fired. To ensure the focus origin is always correct,\n        // the focus origin will be determined at the beginning of the next tick.\n\n        _this13._originTimeoutId = setTimeout(function () {\n          return _this13._origin = null;\n        }, 1);\n      });\n    }\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param {?} event The focus event to check.\n     * @return {?} Whether the event was caused by a touch.\n     */\n\n  }, {\n    key: \"_wasCausedByTouch\",\n    value: function _wasCausedByTouch(event) {\n      /** @type {?} */\n      var focusTarget = event.target;\n      return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param {?} event The focus event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus(event, element) {\n      /** @type {?} */\n      var elementInfo = this._elementInfo.get(element);\n\n      if (!elementInfo || !elementInfo.checkChildren && element !== event.target) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var origin = this._origin;\n\n      if (!origin) {\n        if (this._windowFocused && this._lastFocusOrigin) {\n          origin = this._lastFocusOrigin;\n        } else if (this._wasCausedByTouch(event)) {\n          origin = 'touch';\n        } else {\n          origin = 'program';\n        }\n      }\n\n      this._setClasses(element, origin);\n\n      this._emitOrigin(elementInfo.subject, origin);\n\n      this._lastFocusOrigin = origin;\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param {?} event The blur event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur(event, element) {\n      /** @type {?} */\n      var elementInfo = this._elementInfo.get(element);\n\n      if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n        return;\n      }\n\n      this._setClasses(element);\n\n      this._emitOrigin(elementInfo.subject, null);\n    }\n    /**\n     * @param {?} subject\n     * @param {?} origin\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitOrigin\",\n    value: function _emitOrigin(subject, origin) {\n      this._ngZone.run(function () {\n        return subject.next(origin);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_incrementMonitoredElementCount\",\n    value: function _incrementMonitoredElementCount() {\n      // Register global listeners when first element is monitored.\n      if (++this._monitoredElementCount == 1) {\n        this._registerGlobalListeners();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_decrementMonitoredElementCount\",\n    value: function _decrementMonitoredElementCount() {\n      // Unregister global listeners when last element is unmonitored.\n      if (! --this._monitoredElementCount) {\n        this._unregisterGlobalListeners();\n\n        this._unregisterGlobalListeners = function () {};\n      }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getNativeElement\",\n    value: function _getNativeElement(element) {\n      return element instanceof ElementRef ? element.nativeElement : element;\n    }\n  }]);\n\n  return FocusMonitor;\n}();\n\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nFocusMonitor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: FocusMonitor,\n  factory: FocusMonitor.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nFocusMonitor.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: Platform\n  }];\n};\n/** @nocollapse */\n\n\nFocusMonitor.ngInjectableDef = defineInjectable({\n  factory: function FocusMonitor_Factory() {\n    return new FocusMonitor(inject(NgZone), inject(Platform));\n  },\n  token: FocusMonitor,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n\n\nvar CdkMonitorFocus = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusMonitor\n   */\n  function CdkMonitorFocus(_elementRef, _focusMonitor) {\n    var _this14 = this;\n\n    _classCallCheck(this, CdkMonitorFocus);\n\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this.cdkFocusChange = new EventEmitter();\n    this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(function (origin) {\n      return _this14.cdkFocusChange.emit(origin);\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkMonitorFocus, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._monitorSubscription.unsubscribe();\n    }\n  }]);\n\n  return CdkMonitorFocus;\n}();\n\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n  return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n};\n\nCdkMonitorFocus.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkMonitorFocus,\n  selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n  outputs: {\n    cdkFocusChange: \"cdkFocusChange\"\n  }\n});\n/** @nocollapse */\n\nCdkMonitorFocus.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }];\n};\n\nCdkMonitorFocus.propDecorators = {\n  cdkFocusChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusMonitor\n    }];\n  }, {\n    cdkFocusChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\n\n\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nvar FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\n\nfunction isFakeMousedownFromScreenReader(event) {\n  return event.buttons === 0;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar A11yModule = function A11yModule() {\n  _classCallCheck(this, A11yModule);\n};\n\nA11yModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: A11yModule\n});\nA11yModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function A11yModule_Factory(t) {\n    return new (t || A11yModule)();\n  },\n  imports: [[CommonModule, PlatformModule, ObserversModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function declarations() {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function imports() {\n      return [CommonModule, PlatformModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PlatformModule, ObserversModule],\n      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule };","map":{"version":3,"sources":["../../../src/cdk/a11y/aria-describer/aria-reference.ts","../../../src/cdk/a11y/aria-describer/aria-describer.ts","../../../src/cdk/a11y/key-manager/list-key-manager.ts","../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../../src/cdk/a11y/key-manager/focus-key-manager.ts","../../../src/cdk/a11y/interactivity-checker/interactivity-checker.ts","../../../src/cdk/a11y/focus-trap/focus-trap.ts","../../../src/cdk/a11y/live-announcer/live-announcer-token.ts","../../../src/cdk/a11y/live-announcer/live-announcer.ts","../../../src/cdk/a11y/focus-monitor/focus-monitor.ts","../../../src/cdk/a11y/fake-mousedown.ts","../../../src/cdk/a11y/a11y-module.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are deliminated by an empty space, as per the spec. */\nconst ID_DELIMINATOR = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) { return; }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\n\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n  /** The element containing the message. */\n  messageElement: Element;\n\n  /** The number of elements that reference this message element via `aria-describedby`. */\n  referenceCount: number;\n}\n\n/** ID used for the body container where all messages are appended. */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/** ID prefix used for each created message element. */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/** Attribute given to each host element that is described by a message element. */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map<string, RegisteredMessage>();\n\n/** Container for all registered messages. */\nlet messagesContainer: HTMLElement | null = null;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n  private _document: Document;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n  describe(hostElement: Element, message: string) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (!messageRegistry.has(message)) {\n      this._createMessageElement(message);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\n      this._addMessageReference(hostElement, message);\n    }\n  }\n\n  /** Removes the host element's aria-describedby reference to the message element. */\n  removeDescription(hostElement: Element, message: string) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (this._isElementDescribedByMessage(hostElement, message)) {\n      this._removeMessageReference(hostElement, message);\n    }\n\n    const registeredMessage = messageRegistry.get(message);\n    if (registeredMessage && registeredMessage.referenceCount === 0) {\n      this._deleteMessageElement(message);\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements =\n        this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\n\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  private _createMessageElement(message: string) {\n    const messageElement = this._document.createElement('div');\n    messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n    messageElement.appendChild(this._document.createTextNode(message)!);\n\n    this._createMessagesContainer();\n    messagesContainer!.appendChild(messageElement);\n\n    messageRegistry.set(message, {messageElement, referenceCount: 0});\n  }\n\n  /** Deletes the message element from the global messages container. */\n  private _deleteMessageElement(message: string) {\n    const registeredMessage = messageRegistry.get(message);\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n    messageRegistry.delete(message);\n  }\n\n  /** Creates the global container for all aria-describedby messages. */\n  private _createMessagesContainer() {\n    if (!messagesContainer) {\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      if (preExistingContainer) {\n        preExistingContainer.parentNode!.removeChild(preExistingContainer);\n      }\n\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\n      messagesContainer.setAttribute('aria-hidden', 'true');\n      messagesContainer.style.display = 'none';\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n\n  /** Deletes the global messages container. */\n  private _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  private _removeCdkDescribedByReferenceIds(element: Element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n        .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  private _addMessageReference(element: Element, message: string) {\n    const registeredMessage = messageRegistry.get(message)!;\n\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n\n    registeredMessage.referenceCount++;\n  }\n\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  private _removeMessageReference(element: Element, message: string) {\n    const registeredMessage = messageRegistry.get(message)!;\n    registeredMessage.referenceCount--;\n\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n\n  /** Returns true if the element has been described by the provided message ID. */\n  private _isElementDescribedByMessage(element: Element, message: string): boolean {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = messageRegistry.get(message);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n\n  /** Determines whether a message can be described on a particular element. */\n  private _canBeDescribed(element: Element, message: string): boolean {\n    return element.nodeType === this._document.ELEMENT_NODE && message != null &&\n        !!`${message}`.trim();\n  }\n\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher: AriaDescriber, _document: any) {\n  return parentDispatcher || new AriaDescriber(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [\n    [new Optional(), new SkipSelf(), AriaDescriber],\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T;\n  private _wrap = false;\n  private _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  tabOut: Subject<void> = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream.pipe(\n      tap(keyCode => this._pressedLetters.push(keyCode)),\n      debounceTime(debounceInterval),\n      filter(() => this._pressedLetters.length > 0),\n      map(() => this._pressedLetters.join(''))\n    ).subscribe(inputString => {\n      const items = this._getItemsArray();\n\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n\n        if (!this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0) {\n\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      this._pressedLetters = [];\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousIndex = this._activeItemIndex;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItemIndex !== previousIndex) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal === 'ltr') {\n          this.setNextItemActive();\n          break;\n        } else if (this._horizontal === 'rtl') {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal === 'ltr') {\n          this.setPreviousItemActive();\n          break;\n        } else if (this._horizontal === 'rtl') {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n        // otherwise fall back to resolving alphanumeric characters via the keyCode.\n        if (event.key && event.key.length === 1) {\n          this._letterKeyStream.next(event.key.toLocaleUpperCase());\n        } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n          this._letterKeyStream.next(String.fromCharCode(keyCode));\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n                                            : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n    this._activeItemIndex = index;\n    this._activeItem = itemArray[index];\n  }\n\n  /**\n   * Allows setting of the activeItemIndex without any other effects.\n   * @param index The new activeItemIndex.\n   * @deprecated Use `updateActiveItem` instead.\n   * @breaking-change 8.0.0\n   */\n  updateActiveItemIndex(index: number): void {\n    this.updateActiveItem(index);\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  /** Applies the styles for an active item to this item. */\n  setActiveStyles(): void;\n\n  /** Applies the styles for an inactive item to this item. */\n  setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n  /**\n   * Sets the active item to the item at the specified index and adds the\n   * active styles to the newly active item. Also removes active styles\n   * from the previously active item.\n   * @param index Index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item to the specified one and adds the\n   * active styles to the it. Also removes active styles from the\n   * previously active item.\n   * @param item Item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(index: any): void {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable} from '@angular/core';\n\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n@Injectable({providedIn: 'root'})\nexport class InteractivityChecker {\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      const frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight ||\n      (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  DoCheck,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\n\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\nexport class FocusTrap {\n  private _startAnchor: HTMLElement | null;\n  private _endAnchor: HTMLElement | null;\n  private _hasAttached = false;\n\n  /** Whether the focus trap is active. */\n  get enabled(): boolean { return this._enabled; }\n  set enabled(value: boolean) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  private _enabled: boolean = true;\n\n  constructor(\n    private _element: HTMLElement,\n    private _checker: InteractivityChecker,\n    private _ngZone: NgZone,\n    private _document: Document,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors(): boolean {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor!.addEventListener('focus', () => this.focusLastTabbableElement());\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor!.addEventListener('focus', () => this.focusFirstTabbableElement());\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusInitialElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusFirstTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusLastTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n                                                 `[cdkFocusRegion${bound}], ` +\n                                                 `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>;\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                     `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                     `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ?\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfuly.\n   */\n  focusInitialElement(): boolean {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n                                                          `[cdkFocusInitial]`) as HTMLElement;\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n      }\n\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfuly.\n   */\n  focusFirstTabbableElement(): boolean {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfuly.\n   */\n  focusLastTabbableElement(): boolean {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Checks whether the focus trap has successfuly been attached.\n   */\n  hasAttached(): boolean {\n    return this._hasAttached;\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n        this._getFirstTabbableElement(children[i] as HTMLElement) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n        this._getLastTabbableElement(children[i] as HTMLElement) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Creates an anchor element. */\n  private _createAnchor(): HTMLElement {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n\n  /** Executes a function when the zone is stable. */\n  private _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n\n\n/** Factory that allows easy instantiation of focus traps. */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapFactory {\n  private _document: Document;\n\n  constructor(\n      private _checker: InteractivityChecker,\n      private _ngZone: NgZone,\n      @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\n    return new FocusTrap(\n        element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n}\n\n/** Directive for trapping focus within a region. */\n@Directive({\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n})\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, DoCheck {\n  private _document: Document;\n\n  /** Underlying FocusTrap instance. */\n  focusTrap: FocusTrap;\n\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n  private _previouslyFocusedElement: HTMLElement | null = null;\n\n  /** Whether the focus trap is active. */\n  @Input('cdkTrapFocus')\n  get enabled(): boolean { return this.focusTrap.enabled; }\n  set enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n\n  /**\n   * Whether the directive should automatially move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  @Input('cdkTrapFocusAutoCapture')\n  get autoCapture(): boolean { return this._autoCapture; }\n  set autoCapture(value: boolean) { this._autoCapture = coerceBooleanProperty(value); }\n  private _autoCapture: boolean;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLElement>,\n      private _focusTrapFactory: FocusTrapFactory,\n      @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._previouslyFocusedElement = this._document.activeElement as HTMLElement;\n      this.focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n// The token for the live announcer element is defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN =\n    new InjectionToken<HTMLElement | null>('liveAnnouncerElement', {\n      providedIn: 'root',\n      factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n    });\n\n/** @docs-private */\nexport function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY(): null {\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentObserver} from '@angular/cdk/observers';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Provider,\n  SkipSelf,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {LIVE_ANNOUNCER_ELEMENT_TOKEN} from './live-announcer-token';\n\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\n@Injectable({providedIn: 'root'})\nexport class LiveAnnouncer implements OnDestroy {\n  private readonly _liveElement: HTMLElement;\n  private _document: Document;\n\n  constructor(\n      @Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any,\n      private _ngZone: NgZone,\n      @Inject(DOCUMENT) _document: any) {\n\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader\n   * @param politeness The politeness of the announcer element\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness: AriaLivePoliteness = 'polite'): Promise<void> {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          this._liveElement.textContent = message;\n          resolve();\n        }, 100);\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n\n  private _createLiveElement(): HTMLElement {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].parentNode!.removeChild(previousElements[i]);\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n}\n\n\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n@Directive({\n  selector: '[cdkAriaLive]',\n  exportAs: 'cdkAriaLive',\n})\nexport class CdkAriaLive implements OnDestroy {\n  /** The aria-live politeness level to use when announcing messages. */\n  @Input('cdkAriaLive')\n  get politeness(): AriaLivePoliteness { return this._politeness; }\n  set politeness(value: AriaLivePoliteness) {\n    this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver\n          .observe(this._elementRef)\n          .subscribe(() => {\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n            const element = this._elementRef.nativeElement;\n            this._liveAnnouncer.announce(element.textContent, this._politeness);\n          });\n      });\n    }\n  }\n  private _politeness: AriaLivePoliteness = 'off';\n\n  private _subscription: Subscription | null;\n\n  constructor(private _elementRef: ElementRef, private _liveAnnouncer: LiveAnnouncer,\n              private _contentObserver: ContentObserver, private _ngZone: NgZone) {}\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(\n    parentDispatcher: LiveAnnouncer, liveElement: any, _document: any, ngZone: NgZone) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, _document, ngZone);\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const LIVE_ANNOUNCER_PROVIDER: Provider = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n    DOCUMENT,\n    NgZone,\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\n/**\n * Corresponds to the options that can be passed to the native `focus` event.\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n */\nexport interface FocusOptions {\n  /** Whether the browser should scroll to the element when it is focused. */\n  preventScroll?: boolean;\n}\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  subject: Subject<FocusOrigin>\n};\n\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n  /** The focus origin that the next focus event is a result of. */\n  private _origin: FocusOrigin = null;\n\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n  private _lastFocusOrigin: FocusOrigin;\n\n  /** Whether the window has just been focused. */\n  private _windowFocused = false;\n\n  /** The target of the last touch event. */\n  private _lastTouchTarget: EventTarget | null;\n\n  /** The timeout id of the touch timeout, used to cancel timeout later. */\n  private _touchTimeoutId: number;\n\n  /** The timeout id of the window focus timeout. */\n  private _windowFocusTimeoutId: number;\n\n  /** The timeout id of the origin clearing timeout. */\n  private _originTimeoutId: number;\n\n  /** Map of elements being monitored to their info. */\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n  /** A map of global objects to lists of current listeners. */\n  private _unregisterGlobalListeners = () => {};\n\n  /** The number of elements currently being monitored. */\n  private _monitoredElementCount = 0;\n\n  constructor(private _ngZone: NgZone, private _platform: Platform) {}\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  monitor(element: HTMLElement | ElementRef<HTMLElement>,\n          checkChildren: boolean = false): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return observableOf(null);\n    }\n\n    const nativeElement = this._getNativeElement(element);\n\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(nativeElement)) {\n      let cachedInfo = this._elementInfo.get(nativeElement);\n      cachedInfo!.checkChildren = checkChildren;\n      return cachedInfo!.subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let info: MonitoredElementInfo = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._incrementMonitoredElementCount();\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let focusListener = (event: FocusEvent) => this._onFocus(event, nativeElement);\n    let blurListener = (event: FocusEvent) => this._onBlur(event, nativeElement);\n    this._ngZone.runOutsideAngular(() => {\n      nativeElement.addEventListener('focus', focusListener, true);\n      nativeElement.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      nativeElement.removeEventListener('focus', focusListener, true);\n      nativeElement.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: HTMLElement): void;\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<HTMLElement>): void;\n\n  stopMonitoring(element: HTMLElement | ElementRef<HTMLElement>): void {\n    const nativeElement = this._getNativeElement(element);\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._decrementMonitoredElementCount();\n    }\n  }\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions): void;\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions): void;\n\n  focusVia(element: HTMLElement | ElementRef<HTMLElement>,\n          origin: FocusOrigin,\n          options?: FocusOptions): void {\n\n    const nativeElement = this._getNativeElement(element);\n\n    this._setOriginForCurrentEventQueue(origin);\n\n    // `focus` isn't available on the server\n    if (typeof nativeElement.focus === 'function') {\n      // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n      (nativeElement as any).focus(options);\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n\n  /** Register necessary event listeners on the document and window. */\n  private _registerGlobalListeners() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    let documentKeydownListener = () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    };\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    let documentMousedownListener = () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    };\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n    // see if a focus happens.\n    let documentTouchstartListener = (event: TouchEvent) => {\n      if (this._touchTimeoutId != null) {\n        clearTimeout(this._touchTimeoutId);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    };\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    let windowFocusListener = () => {\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n    };\n\n    // Event listener options that enable capturing and also mark the the listener as passive\n    // if the browser supports it.\n    const captureEventListenerOptions = normalizePassiveListenerOptions({\n      passive: true,\n      capture: true\n    });\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n    this._ngZone.runOutsideAngular(() => {\n      document.addEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n      document.addEventListener('mousedown', documentMousedownListener,\n        captureEventListenerOptions);\n      document.addEventListener('touchstart', documentTouchstartListener,\n        captureEventListenerOptions);\n      window.addEventListener('focus', windowFocusListener);\n    });\n\n    this._unregisterGlobalListeners = () => {\n      document.removeEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n      document.removeEventListener('mousedown', documentMousedownListener,\n        captureEventListenerOptions);\n      document.removeEventListener('touchstart', documentTouchstartListener,\n        captureEventListenerOptions);\n      window.removeEventListener('focus', windowFocusListener);\n\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    };\n  }\n\n  private _toggleClass(element: Element, className: string, shouldSet: boolean) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    const elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      this._toggleClass(element, 'cdk-focused', !!origin);\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n  }\n\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * @param origin The origin to set.\n   */\n  private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n      // tick after the interaction event fired. To ensure the focus origin is always correct,\n      // the focus origin will be determined at the beginning of the next tick.\n      this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n    });\n  }\n\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @param event The focus event to check.\n   * @returns Whether the event was caused by a touch.\n   */\n  private _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, 'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    let origin = this._origin;\n    if (!origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        origin = 'touch';\n      } else {\n        origin = 'program';\n      }\n    }\n\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo.subject, origin);\n    this._lastFocusOrigin = origin;\n  }\n\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n  _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    this._emitOrigin(elementInfo.subject, null);\n  }\n\n  private _emitOrigin(subject: Subject<FocusOrigin>, origin: FocusOrigin) {\n    this._ngZone.run(() => subject.next(origin));\n  }\n\n  private _incrementMonitoredElementCount() {\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount == 1) {\n      this._registerGlobalListeners();\n    }\n  }\n\n  private _decrementMonitoredElementCount() {\n    // Unregister global listeners when last element is unmonitored.\n    if (!--this._monitoredElementCount) {\n      this._unregisterGlobalListeners();\n      this._unregisterGlobalListeners = () => {};\n    }\n  }\n\n  private _getNativeElement(element: HTMLElement | ElementRef<HTMLElement>): HTMLElement {\n    return element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\n\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n})\nexport class CdkMonitorFocus implements OnDestroy {\n  private _monitorSubscription: Subscription;\n  @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _focusMonitor: FocusMonitor) {\n    this._monitorSubscription = this._focusMonitor.monitor(\n        this._elementRef,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._monitorSubscription.unsubscribe();\n  }\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\nimport {CdkAriaLive} from './live-announcer/live-announcer';\n\n@NgModule({\n  imports: [CommonModule, PlatformModule, ObserversModule],\n  declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n})\nexport class A11yModule {}\n"]},"metadata":{},"sourceType":"module"}