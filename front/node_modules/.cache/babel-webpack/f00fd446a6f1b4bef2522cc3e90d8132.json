{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, Inject, InjectionToken, NgZone, Optional, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MAT_LABEL_GLOBAL_OPTIONS, mixinColor } from '@angular/material/core';\nimport { fromEvent, merge } from 'rxjs';\nimport { startWith, take } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { ObserversModule } from '@angular/cdk/observers';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/observers';\nvar _c0 = [\"underline\"];\nvar _c1 = [\"connectionContainer\"];\nvar _c2 = [\"inputContainer\"];\nvar _c3 = [\"label\"];\n\nfunction MatFormField_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14);\n    ɵngcc0.ɵɵelement(2, \"div\", 15);\n    ɵngcc0.ɵɵelement(3, \"div\", 16);\n    ɵngcc0.ɵɵelement(4, \"div\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 18);\n    ɵngcc0.ɵɵelement(6, \"div\", 15);\n    ɵngcc0.ɵɵelement(7, \"div\", 16);\n    ɵngcc0.ɵɵelement(8, \"div\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction MatFormField_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵprojection(1, 1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction MatFormField_label_9_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r10._control.placeholder);\n  }\n}\n\nfunction MatFormField_label_9_ng_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatFormField_label_9_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 23);\n    ɵngcc0.ɵɵtext(1, \"\\xA0*\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction MatFormField_label_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r14 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 20, 21);\n    ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatFormField_label_9_Template_label_cdkObserveContent_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      var ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.updateOutlineGap();\n    });\n    ɵngcc0.ɵɵtemplate(2, MatFormField_label_9_ng_container_2_Template, 3, 1, \"ng-container\", 12);\n    ɵngcc0.ɵɵtemplate(3, MatFormField_label_9_ng_content_3_Template, 1, 0, \"ng-content\", 12);\n    ɵngcc0.ɵɵtemplate(4, MatFormField_label_9_span_4_Template, 2, 0, \"span\", 22);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-empty\", ctx_r4._control.empty && !ctx_r4._shouldAlwaysFloat)(\"mat-form-field-empty\", ctx_r4._control.empty && !ctx_r4._shouldAlwaysFloat)(\"mat-accent\", ctx_r4.color == \"accent\")(\"mat-warn\", ctx_r4.color == \"warn\");\n    ɵngcc0.ɵɵproperty(\"cdkObserveContentDisabled\", ctx_r4.appearance != \"outline\")(\"id\", ctx_r4._labelId)(\"ngSwitch\", ctx_r4._hasLabel());\n    ɵngcc0.ɵɵattribute(\"for\", ctx_r4._control.id)(\"aria-owns\", ctx_r4._control.id);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r4.hideRequiredMarker && ctx_r4._control.required && !ctx_r4._control.disabled);\n  }\n}\n\nfunction MatFormField_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 24);\n    ɵngcc0.ɵɵprojection(1, 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction MatFormField_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 25, 26);\n    ɵngcc0.ɵɵelement(2, \"span\", 27);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"mat-accent\", ctx_r6.color == \"accent\")(\"mat-warn\", ctx_r6.color == \"warn\");\n  }\n}\n\nfunction MatFormField_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵprojection(1, 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transitionMessages\", ctx_r7._subscriptAnimationState);\n  }\n}\n\nfunction MatFormField_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 31);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r16 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r16._hintLabelId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r16.hintLabel);\n  }\n}\n\nfunction MatFormField_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 28);\n    ɵngcc0.ɵɵtemplate(1, MatFormField_div_14_div_1_Template, 2, 2, \"div\", 29);\n    ɵngcc0.ɵɵprojection(2, 6);\n    ɵngcc0.ɵɵelement(3, \"div\", 30);\n    ɵngcc0.ɵɵprojection(4, 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transitionMessages\", ctx_r8._subscriptAnimationState);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r8.hintLabel);\n  }\n}\n\nvar _c4 = [\"*\", [[\"\", \"matPrefix\", \"\"]], [[\"mat-placeholder\"]], [[\"mat-label\"]], [[\"\", \"matSuffix\", \"\"]], [[\"mat-error\"]], [[\"mat-hint\", 3, \"align\", \"end\"]], [[\"mat-hint\", \"align\", \"end\"]]];\nvar _c5 = [\"*\", \"[matPrefix]\", \"mat-placeholder\", \"mat-label\", \"[matSuffix]\", \"mat-error\", \"mat-hint:not([align='end'])\", \"mat-hint[align='end']\"];\nvar nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\n\nvar MatError = function MatError() {\n  _classCallCheck(this, MatError);\n\n  this.id = \"mat-error-\".concat(nextUniqueId++);\n};\n\nMatError.ɵfac = function MatError_Factory(t) {\n  return new (t || MatError)();\n};\n\nMatError.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatError,\n  selectors: [[\"mat-error\"]],\n  hostAttrs: [\"role\", \"alert\", 1, \"mat-error\"],\n  hostVars: 1,\n  hostBindings: function MatError_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  }\n});\nMatError.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatError, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-error',\n      host: {\n        'class': 'mat-error',\n        'role': 'alert',\n        '[attr.id]': 'id'\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Animations used by the MatFormField.\n * \\@docs-private\n  @type {?} */\n\n\nvar matFormFieldAnimations = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [// TODO(mmalerba): Use angular animations for label animation as well.\n  state('enter', style({\n    opacity: 1,\n    transform: 'translateY(0%)'\n  })), transition('void => enter', [style({\n    opacity: 0,\n    transform: 'translateY(-100%)'\n  }), animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * An interface which allows a control to work inside of a `MatFormField`.\n * @abstract\n * @template T\n */\n\nvar MatFormFieldControl = function MatFormFieldControl() {\n  _classCallCheck(this, MatFormFieldControl);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatFormFieldPlaceholderConflictError() {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\n\n\nfunction getMatFormFieldDuplicatedHintError(align) {\n  return Error(\"A hint was already declared for 'align=\\\"\".concat(align, \"\\\"'.\"));\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatFormFieldMissingControlError() {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar nextUniqueId$1 = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\n\nvar MatHint = function MatHint() {\n  _classCallCheck(this, MatHint);\n\n  /**\n   * Whether to align the hint label at the start or end of the line.\n   */\n  this.align = 'start';\n  /**\n   * Unique ID for the hint. Used for the aria-describedby on the form field control.\n   */\n\n  this.id = \"mat-hint-\".concat(nextUniqueId$1++);\n};\n\nMatHint.ɵfac = function MatHint_Factory(t) {\n  return new (t || MatHint)();\n};\n\nMatHint.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatHint,\n  selectors: [[\"mat-hint\"]],\n  hostAttrs: [1, \"mat-hint\"],\n  hostVars: 4,\n  hostBindings: function MatHint_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"align\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-right\", ctx.align == \"end\");\n    }\n  },\n  inputs: {\n    align: \"align\",\n    id: \"id\"\n  }\n});\nMatHint.propDecorators = {\n  align: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatHint, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-hint',\n      host: {\n        'class': 'mat-hint',\n        '[class.mat-right]': 'align == \"end\"',\n        '[attr.id]': 'id',\n        // Remove align attribute to prevent it from interfering with layout.\n        '[attr.align]': 'null'\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    align: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * The floating label for a `mat-form-field`.\n */\n\n\nvar MatLabel = function MatLabel() {\n  _classCallCheck(this, MatLabel);\n};\n\nMatLabel.ɵfac = function MatLabel_Factory(t) {\n  return new (t || MatLabel)();\n};\n\nMatLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatLabel,\n  selectors: [[\"mat-label\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatLabel, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-label'\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * \\@breaking-change 8.0.0\n */\n\n\nvar MatPlaceholder = function MatPlaceholder() {\n  _classCallCheck(this, MatPlaceholder);\n};\n\nMatPlaceholder.ɵfac = function MatPlaceholder_Factory(t) {\n  return new (t || MatPlaceholder)();\n};\n\nMatPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatPlaceholder,\n  selectors: [[\"mat-placeholder\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatPlaceholder, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-placeholder'\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Prefix to be placed the the front of the form field.\n */\n\n\nvar MatPrefix = function MatPrefix() {\n  _classCallCheck(this, MatPrefix);\n};\n\nMatPrefix.ɵfac = function MatPrefix_Factory(t) {\n  return new (t || MatPrefix)();\n};\n\nMatPrefix.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatPrefix,\n  selectors: [[\"\", \"matPrefix\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatPrefix, [{\n    type: Directive,\n    args: [{\n      selector: '[matPrefix]'\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Suffix to be placed at the end of the form field.\n */\n\n\nvar MatSuffix = function MatSuffix() {\n  _classCallCheck(this, MatSuffix);\n};\n\nMatSuffix.ɵfac = function MatSuffix_Factory(t) {\n  return new (t || MatSuffix)();\n};\n\nMatSuffix.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatSuffix,\n  selectors: [[\"\", \"matSuffix\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSuffix, [{\n    type: Directive,\n    args: [{\n      selector: '[matSuffix]'\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar nextUniqueId$2 = 0;\n/** @type {?} */\n\nvar floatingLabelScale = 0.75;\n/** @type {?} */\n\nvar outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * \\@docs-private\n */\n\nvar MatFormFieldBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatFormFieldBase(_elementRef) {\n  _classCallCheck(this, MatFormFieldBase);\n\n  this._elementRef = _elementRef;\n};\n/** *\n * Base class to which we're applying the form field mixins.\n * \\@docs-private\n  @type {?} */\n\n\nvar _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/** *\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n  @type {?} */\n\n\nvar MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\n\nvar MatFormField = /*#__PURE__*/function (_MatFormFieldMixinBas) {\n  _inherits(MatFormField, _MatFormFieldMixinBas);\n\n  var _super = _createSuper(MatFormField);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} labelOptions\n   * @param {?} _dir\n   * @param {?} _defaults\n   * @param {?=} _platform\n   * @param {?=} _ngZone\n   * @param {?=} _animationMode\n   */\n  function MatFormField(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n    var _this;\n\n    _classCallCheck(this, MatFormField);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._dir = _dir;\n    _this._defaults = _defaults;\n    _this._platform = _platform;\n    _this._ngZone = _ngZone;\n    _this._outlineGapCalculationNeeded = false;\n    /**\n     * Override for the logic that disables the label animation in certain cases.\n     */\n\n    _this._showAlwaysAnimate = false;\n    /**\n     * State of the mat-hint and mat-error animations.\n     */\n\n    _this._subscriptAnimationState = '';\n    _this._hintLabel = ''; // Unique id for the hint label.\n\n    _this._hintLabelId = \"mat-hint-\".concat(nextUniqueId$2++); // Unique id for the internal form field label.\n\n    _this._labelId = \"mat-form-field-label-\".concat(nextUniqueId$2++);\n    _this._labelOptions = labelOptions ? labelOptions : {};\n    _this.floatLabel = _this._labelOptions.float || 'auto';\n    _this._animationsEnabled = _animationMode !== 'NoopAnimations'; // Set the default through here so we invoke the setter on the first run.\n\n    _this.appearance = _defaults && _defaults.appearance ? _defaults.appearance : 'legacy';\n    return _this;\n  }\n  /**\n   * The form-field appearance style.\n   * @return {?}\n   */\n\n\n  _createClass(MatFormField, [{\n    key: \"appearance\",\n    get: function get() {\n      return this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var oldValue = this._appearance;\n      this._appearance = value || this._defaults && this._defaults.appearance || 'legacy';\n\n      if (this._appearance === 'outline' && oldValue !== value) {\n        this._updateOutlineGapOnStable();\n      }\n    }\n    /**\n     * Whether the required marker should be hidden.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hideRequiredMarker\",\n    get: function get() {\n      return this._hideRequiredMarker;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the floating label should always float or not.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldAlwaysFloat\",\n    get: function get() {\n      return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n    }\n    /**\n     * Whether the label can float or not.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canLabelFloat\",\n    get: function get() {\n      return this.floatLabel !== 'never';\n    }\n    /**\n     * Text for the form field hint.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hintLabel\",\n    get: function get() {\n      return this._hintLabel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._hintLabel = value;\n\n      this._processHints();\n    }\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     * @return {?}\n     */\n\n  }, {\n    key: \"floatLabel\",\n    get: function get() {\n      return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value !== this._floatLabel) {\n        this._floatLabel = value || this._labelOptions.float || 'auto';\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getConnectedOverlayOrigin\",\n    value: function getConnectedOverlayOrigin() {\n      return this._connectionContainerRef || this._elementRef;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._validateControlChild();\n      /** @type {?} */\n\n\n      var control = this._control;\n\n      if (control.controlType) {\n        this._elementRef.nativeElement.classList.add(\"mat-form-field-type-\".concat(control.controlType));\n      } // Subscribe to changes in the child control state in order to update the form field UI.\n\n\n      control.stateChanges.pipe(startWith(\n      /** @type {?} */\n      null)).subscribe(function () {\n        _this2._validatePlaceholders();\n\n        _this2._syncDescribedByIds();\n\n        _this2._changeDetectorRef.markForCheck();\n      }); // Run change detection if the value changes.\n\n      if (control.ngControl && control.ngControl.valueChanges) {\n        control.ngControl.valueChanges.subscribe(function () {\n          return _this2._changeDetectorRef.markForCheck();\n        });\n      } // Run change detection and update the outline if the suffix or prefix changes.\n\n\n      merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(function () {\n        _this2._updateOutlineGapOnStable();\n\n        _this2._changeDetectorRef.markForCheck();\n      }); // Re-validate when the number of hints changes.\n\n      this._hintChildren.changes.pipe(startWith(null)).subscribe(function () {\n        _this2._processHints();\n\n        _this2._changeDetectorRef.markForCheck();\n      }); // Update the aria-described by when the number of errors changes.\n\n\n      this._errorChildren.changes.pipe(startWith(null)).subscribe(function () {\n        _this2._syncDescribedByIds();\n\n        _this2._changeDetectorRef.markForCheck();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      this._validateControlChild();\n\n      if (this._outlineGapCalculationNeeded) {\n        this.updateOutlineGap();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      // Avoid animations on load.\n      this._subscriptAnimationState = 'enter';\n\n      this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Determines whether a class from the NgControl should be forwarded to the host element.\n     * @param {?} prop\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldForward\",\n    value: function _shouldForward(prop) {\n      /** @type {?} */\n      var ngControl = this._control ? this._control.ngControl : null;\n      return ngControl && ngControl[prop];\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hasPlaceholder\",\n    value: function _hasPlaceholder() {\n      return !!(this._control && this._control.placeholder || this._placeholderChild);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hasLabel\",\n    value: function _hasLabel() {\n      return !!this._labelChild;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldLabelFloat\",\n    value: function _shouldLabelFloat() {\n      return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hideControlPlaceholder\",\n    value: function _hideControlPlaceholder() {\n      // In the legacy appearance the placeholder is promoted to a label if no label is given.\n      return this.appearance === 'legacy' && !this._hasLabel() || this._hasLabel() && !this._shouldLabelFloat();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hasFloatingLabel\",\n    value: function _hasFloatingLabel() {\n      // In the legacy appearance the placeholder is promoted to a label if no label is given.\n      return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n    }\n    /**\n     * Determines whether to display hints or errors.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDisplayedMessages\",\n    value: function _getDisplayedMessages() {\n      return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState ? 'error' : 'hint';\n    }\n    /**\n     * Animates the placeholder up and locks it in position.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_animateAndLockLabel\",\n    value: function _animateAndLockLabel() {\n      var _this3 = this;\n\n      if (this._hasFloatingLabel() && this._canLabelFloat) {\n        // If animations are disabled, we shouldn't go in here,\n        // because the `transitionend` will never fire.\n        if (this._animationsEnabled) {\n          this._showAlwaysAnimate = true;\n          fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(function () {\n            _this3._showAlwaysAnimate = false;\n          });\n        }\n\n        this.floatLabel = 'always';\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_validatePlaceholders\",\n    value: function _validatePlaceholders() {\n      if (this._control.placeholder && this._placeholderChild) {\n        throw getMatFormFieldPlaceholderConflictError();\n      }\n    }\n    /**\n     * Does any extra processing that is required when handling the hints.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_processHints\",\n    value: function _processHints() {\n      this._validateHints();\n\n      this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_validateHints\",\n    value: function _validateHints() {\n      var _this4 = this;\n\n      if (this._hintChildren) {\n        /** @type {?} */\n        var startHint;\n        /** @type {?} */\n\n        var endHint;\n\n        this._hintChildren.forEach(function (hint) {\n          if (hint.align === 'start') {\n            if (startHint || _this4.hintLabel) {\n              throw getMatFormFieldDuplicatedHintError('start');\n            }\n\n            startHint = hint;\n          } else if (hint.align === 'end') {\n            if (endHint) {\n              throw getMatFormFieldDuplicatedHintError('end');\n            }\n\n            endHint = hint;\n          }\n        });\n      }\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncDescribedByIds\",\n    value: function _syncDescribedByIds() {\n      if (this._control) {\n        /** @type {?} */\n        var ids = [];\n\n        if (this._getDisplayedMessages() === 'hint') {\n          /** @type {?} */\n          var startHint = this._hintChildren ? this._hintChildren.find(function (hint) {\n            return hint.align === 'start';\n          }) : null;\n          /** @type {?} */\n\n          var endHint = this._hintChildren ? this._hintChildren.find(function (hint) {\n            return hint.align === 'end';\n          }) : null;\n\n          if (startHint) {\n            ids.push(startHint.id);\n          } else if (this._hintLabel) {\n            ids.push(this._hintLabelId);\n          }\n\n          if (endHint) {\n            ids.push(endHint.id);\n          }\n        } else if (this._errorChildren) {\n          ids = this._errorChildren.map(function (error) {\n            return error.id;\n          });\n        }\n\n        this._control.setDescribedByIds(ids);\n      }\n    }\n    /**\n     * Throws an error if the form field's control is missing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_validateControlChild\",\n    value: function _validateControlChild() {\n      if (!this._control) {\n        throw getMatFormFieldMissingControlError();\n      }\n    }\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateOutlineGap\",\n    value: function updateOutlineGap() {\n      /** @type {?} */\n      var labelEl = this._label ? this._label.nativeElement : null;\n\n      if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length || !labelEl.textContent.trim()) {\n        return;\n      }\n\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      } // If the element is not present in the DOM, the outline gap will need to be calculated\n      // the next time it is checked and in the DOM.\n\n\n      if (!\n      /** @type {?} */\n      document.documentElement.contains(this._elementRef.nativeElement)) {\n        this._outlineGapCalculationNeeded = true;\n        return;\n      }\n      /** @type {?} */\n\n\n      var startWidth = 0;\n      /** @type {?} */\n\n      var gapWidth = 0;\n      /** @type {?} */\n\n      var startEls = this._connectionContainerRef.nativeElement.querySelectorAll('.mat-form-field-outline-start');\n      /** @type {?} */\n\n\n      var gapEls = this._connectionContainerRef.nativeElement.querySelectorAll('.mat-form-field-outline-gap');\n\n      if (this._label && this._label.nativeElement.children.length) {\n        /** @type {?} */\n        var containerStart = this._getStartEnd(this._connectionContainerRef.nativeElement.getBoundingClientRect());\n        /** @type {?} */\n\n\n        var labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n        /** @type {?} */\n\n\n        var labelWidth = 0;\n\n        var _iterator = _createForOfIteratorHelper(labelEl.children),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n            labelWidth += child.offsetWidth;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        startWidth = labelStart - containerStart - outlineGapPadding;\n        gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n      }\n\n      for (var i = 0; i < startEls.length; i++) {\n        startEls.item(i).style.width = \"\".concat(startWidth, \"px\");\n      }\n\n      for (var _i = 0; _i < gapEls.length; _i++) {\n        gapEls.item(_i).style.width = \"\".concat(gapWidth, \"px\");\n      }\n\n      this._outlineGapCalculationNeeded = false;\n    }\n    /**\n     * Gets the start end of the rect considering the current directionality.\n     * @param {?} rect\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getStartEnd\",\n    value: function _getStartEnd(rect) {\n      return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n    }\n    /**\n     * Updates the outline gap the new time the zone stabilizes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateOutlineGapOnStable\",\n    value: function _updateOutlineGapOnStable() {\n      var _this5 = this;\n\n      // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n          return _this5.updateOutlineGap();\n        });\n      } else {\n        Promise.resolve().then(function () {\n          return _this5.updateOutlineGap();\n        });\n      }\n    }\n  }]);\n\n  return MatFormField;\n}(_MatFormFieldMixinBase);\n\nMatFormField.ɵfac = function MatFormField_Factory(t) {\n  return new (t || MatFormField)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_LABEL_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatFormField.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatFormField,\n  selectors: [[\"mat-form-field\"]],\n  contentQueries: function MatFormField_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatFormFieldControl, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatPlaceholder, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLabel, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatError, 0);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatHint, 0);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatPrefix, 0);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSuffix, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._control = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._errorChildren = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._hintChildren = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._prefixChildren = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._suffixChildren = _t);\n    }\n  },\n  viewQuery: function MatFormField_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n      ɵngcc0.ɵɵviewQuery(_c1, 1);\n      ɵngcc0.ɵɵviewQuery(_c2, 1);\n      ɵngcc0.ɵɵviewQuery(_c3, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.underlineRef = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._connectionContainerRef = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputContainerRef = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._label = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-form-field\"],\n  hostVars: 42,\n  hostBindings: function MatFormField_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-form-field-appearance-standard\", ctx.appearance == \"standard\")(\"mat-form-field-appearance-fill\", ctx.appearance == \"fill\")(\"mat-form-field-appearance-outline\", ctx.appearance == \"outline\")(\"mat-form-field-appearance-legacy\", ctx.appearance == \"legacy\")(\"mat-form-field-invalid\", ctx._control.errorState)(\"mat-form-field-can-float\", ctx._canLabelFloat)(\"mat-form-field-should-float\", ctx._shouldLabelFloat())(\"mat-form-field-hide-placeholder\", ctx._hideControlPlaceholder())(\"mat-form-field-disabled\", ctx._control.disabled)(\"mat-form-field-autofilled\", ctx._control.autofilled)(\"mat-focused\", ctx._control.focused)(\"mat-accent\", ctx.color == \"accent\")(\"mat-warn\", ctx.color == \"warn\")(\"ng-untouched\", ctx._shouldForward(\"untouched\"))(\"ng-touched\", ctx._shouldForward(\"touched\"))(\"ng-pristine\", ctx._shouldForward(\"pristine\"))(\"ng-dirty\", ctx._shouldForward(\"dirty\"))(\"ng-valid\", ctx._shouldForward(\"valid\"))(\"ng-invalid\", ctx._shouldForward(\"invalid\"))(\"ng-pending\", ctx._shouldForward(\"pending\"))(\"_mat-animation-noopable\", !ctx._animationsEnabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    floatLabel: \"floatLabel\",\n    appearance: \"appearance\",\n    hideRequiredMarker: \"hideRequiredMarker\",\n    hintLabel: \"hintLabel\"\n  },\n  exportAs: [\"matFormField\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c5,\n  decls: 15,\n  vars: 8,\n  consts: [[1, \"mat-form-field-wrapper\"], [1, \"mat-form-field-flex\", 3, \"click\"], [\"connectionContainer\", \"\"], [4, \"ngIf\"], [\"class\", \"mat-form-field-prefix\", 4, \"ngIf\"], [1, \"mat-form-field-infix\"], [\"inputContainer\", \"\"], [1, \"mat-form-field-label-wrapper\"], [\"class\", \"mat-form-field-label\", 3, \"cdkObserveContentDisabled\", \"id\", \"mat-empty\", \"mat-form-field-empty\", \"mat-accent\", \"mat-warn\", \"ngSwitch\", \"cdkObserveContent\", 4, \"ngIf\"], [\"class\", \"mat-form-field-suffix\", 4, \"ngIf\"], [\"class\", \"mat-form-field-underline\", 4, \"ngIf\"], [1, \"mat-form-field-subscript-wrapper\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [\"class\", \"mat-form-field-hint-wrapper\", 4, \"ngSwitchCase\"], [1, \"mat-form-field-outline\"], [1, \"mat-form-field-outline-start\"], [1, \"mat-form-field-outline-gap\"], [1, \"mat-form-field-outline-end\"], [1, \"mat-form-field-outline\", \"mat-form-field-outline-thick\"], [1, \"mat-form-field-prefix\"], [1, \"mat-form-field-label\", 3, \"cdkObserveContentDisabled\", \"id\", \"ngSwitch\", \"cdkObserveContent\"], [\"label\", \"\"], [\"class\", \"mat-placeholder-required mat-form-field-required-marker\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 1, \"mat-placeholder-required\", \"mat-form-field-required-marker\"], [1, \"mat-form-field-suffix\"], [1, \"mat-form-field-underline\"], [\"underline\", \"\"], [1, \"mat-form-field-ripple\"], [1, \"mat-form-field-hint-wrapper\"], [\"class\", \"mat-hint\", 3, \"id\", 4, \"ngIf\"], [1, \"mat-form-field-hint-spacer\"], [1, \"mat-hint\", 3, \"id\"]],\n  template: function MatFormField_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c4);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n      ɵngcc0.ɵɵlistener(\"click\", function MatFormField_Template_div_click_1_listener($event) {\n        return ctx._control.onContainerClick && ctx._control.onContainerClick($event);\n      });\n      ɵngcc0.ɵɵtemplate(3, MatFormField_ng_container_3_Template, 9, 0, \"ng-container\", 3);\n      ɵngcc0.ɵɵtemplate(4, MatFormField_div_4_Template, 2, 0, \"div\", 4);\n      ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n      ɵngcc0.ɵɵprojection(7);\n      ɵngcc0.ɵɵelementStart(8, \"span\", 7);\n      ɵngcc0.ɵɵtemplate(9, MatFormField_label_9_Template, 5, 16, \"label\", 8);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(10, MatFormField_div_10_Template, 2, 0, \"div\", 9);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(11, MatFormField_div_11_Template, 3, 4, \"div\", 10);\n      ɵngcc0.ɵɵelementStart(12, \"div\", 11);\n      ɵngcc0.ɵɵtemplate(13, MatFormField_div_13_Template, 2, 1, \"div\", 12);\n      ɵngcc0.ɵɵtemplate(14, MatFormField_div_14_Template, 5, 2, \"div\", 13);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.appearance == \"outline\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._prefixChildren.length);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._hasFloatingLabel());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._suffixChildren.length);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.appearance != \"outline\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx._getDisplayedMessages());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"error\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"hint\");\n    }\n  },\n  directives: [ɵngcc3.NgIf, ɵngcc3.NgSwitch, ɵngcc3.NgSwitchCase, ɵngcc4.CdkObserveContent],\n  styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}@media screen and (-ms-high-contrast:active){.mat-form-field-infix{border-image:linear-gradient(transparent,transparent)}}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-empty.mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scaleY(1.0001)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(.5);opacity:0;transition:background-color .3s cubic-bezier(.55,0,.55,.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform .3s cubic-bezier(.25,.8,.25,1),opacity .1s cubic-bezier(.25,.8,.25,1),background-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-label-wrapper .mat-icon,.mat-form-field-subscript-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none} .mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:'';display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em} .mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px} .mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-start{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start{border-width:2px;transition:border-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity .1s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline{transition:none} .mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none} .mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=month]::after,.mat-input-element[type=time]::after,.mat-input-element[type=week]::after{content:' ';white-space:pre;width:1px}.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button,.mat-input-element::-webkit-inner-spin-button{font-size:.75em}.mat-input-element::placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-moz-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-webkit-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element:-ms-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:0 0}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:'';width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matFormFieldAnimations.transitionMessages]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatFormField.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_LABEL_GLOBAL_OPTIONS]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: Platform\n  }, {\n    type: NgZone\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatFormField.propDecorators = {\n  appearance: [{\n    type: Input\n  }],\n  hideRequiredMarker: [{\n    type: Input\n  }],\n  hintLabel: [{\n    type: Input\n  }],\n  floatLabel: [{\n    type: Input\n  }],\n  underlineRef: [{\n    type: ViewChild,\n    args: ['underline']\n  }],\n  _connectionContainerRef: [{\n    type: ViewChild,\n    args: ['connectionContainer']\n  }],\n  _inputContainerRef: [{\n    type: ViewChild,\n    args: ['inputContainer']\n  }],\n  _label: [{\n    type: ViewChild,\n    args: ['label']\n  }],\n  _control: [{\n    type: ContentChild,\n    args: [MatFormFieldControl]\n  }],\n  _placeholderChild: [{\n    type: ContentChild,\n    args: [MatPlaceholder]\n  }],\n  _labelChild: [{\n    type: ContentChild,\n    args: [MatLabel]\n  }],\n  _errorChildren: [{\n    type: ContentChildren,\n    args: [MatError]\n  }],\n  _hintChildren: [{\n    type: ContentChildren,\n    args: [MatHint]\n  }],\n  _prefixChildren: [{\n    type: ContentChildren,\n    args: [MatPrefix]\n  }],\n  _suffixChildren: [{\n    type: ContentChildren,\n    args: [MatSuffix]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatFormField, [{\n    type: Component,\n    args: [{\n      selector: 'mat-form-field',\n      exportAs: 'matFormField',\n      template: \"<div class=\\\"mat-form-field-wrapper\\\"><div class=\\\"mat-form-field-flex\\\" #connectionContainer (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\"><ng-container *ngIf=\\\"appearance == 'outline'\\\"><div class=\\\"mat-form-field-outline\\\"><div class=\\\"mat-form-field-outline-start\\\"></div><div class=\\\"mat-form-field-outline-gap\\\"></div><div class=\\\"mat-form-field-outline-end\\\"></div></div><div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\"><div class=\\\"mat-form-field-outline-start\\\"></div><div class=\\\"mat-form-field-outline-gap\\\"></div><div class=\\\"mat-form-field-outline-end\\\"></div></div></ng-container><div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\"><ng-content select=\\\"[matPrefix]\\\"></ng-content></div><div class=\\\"mat-form-field-infix\\\" #inputContainer><ng-content></ng-content><span class=\\\"mat-form-field-label-wrapper\\\"><label class=\\\"mat-form-field-label\\\" (cdkObserveContent)=\\\"updateOutlineGap()\\\" [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\" [id]=\\\"_labelId\\\" [attr.for]=\\\"_control.id\\\" [attr.aria-owns]=\\\"_control.id\\\" [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\" [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\" #label *ngIf=\\\"_hasFloatingLabel()\\\" [ngSwitch]=\\\"_hasLabel()\\\"><ng-container *ngSwitchCase=\\\"false\\\"><ng-content select=\\\"mat-placeholder\\\"></ng-content>{{_control.placeholder}}</ng-container><ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content><span class=\\\"mat-placeholder-required mat-form-field-required-marker\\\" aria-hidden=\\\"true\\\" *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&nbsp;*</span></label></span></div><div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\"><ng-content select=\\\"[matSuffix]\\\"></ng-content></div></div><div class=\\\"mat-form-field-underline\\\" #underline *ngIf=\\\"appearance != 'outline'\\\"><span class=\\\"mat-form-field-ripple\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\"></span></div><div class=\\\"mat-form-field-subscript-wrapper\\\" [ngSwitch]=\\\"_getDisplayedMessages()\\\"><div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"><ng-content select=\\\"mat-error\\\"></ng-content></div><div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"><div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div><ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content><div class=\\\"mat-form-field-hint-spacer\\\"></div><ng-content select=\\\"mat-hint[align='end']\\\"></ng-content></div></div></div>\",\n      // MatInput is a directive and can't have styles, so we need to include its styles here.\n      // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n      // aren't using MatInput.\n      styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}@media screen and (-ms-high-contrast:active){.mat-form-field-infix{border-image:linear-gradient(transparent,transparent)}}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-empty.mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scaleY(1.0001)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(.5);opacity:0;transition:background-color .3s cubic-bezier(.55,0,.55,.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform .3s cubic-bezier(.25,.8,.25,1),opacity .1s cubic-bezier(.25,.8,.25,1),background-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-label-wrapper .mat-icon,.mat-form-field-subscript-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none} .mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:'';display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em} .mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px} .mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-start{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start{border-width:2px;transition:border-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity .1s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline{transition:none} .mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none} .mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=month]::after,.mat-input-element[type=time]::after,.mat-input-element[type=week]::after{content:' ';white-space:pre;width:1px}.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button,.mat-input-element::-webkit-inner-spin-button{font-size:.75em}.mat-input-element::placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-moz-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-webkit-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element:-ms-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:0 0}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:'';width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\"],\n      animations: [matFormFieldAnimations.transitionMessages],\n      host: {\n        'class': 'mat-form-field',\n        '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n        '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n        '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n        '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n        '[class.mat-form-field-invalid]': '_control.errorState',\n        '[class.mat-form-field-can-float]': '_canLabelFloat',\n        '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n        '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n        '[class.mat-form-field-disabled]': '_control.disabled',\n        '[class.mat-form-field-autofilled]': '_control.autofilled',\n        '[class.mat-focused]': '_control.focused',\n        '[class.mat-accent]': 'color == \"accent\"',\n        '[class.mat-warn]': 'color == \"warn\"',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '[class._mat-animation-noopable]': '!_animationsEnabled'\n      },\n      inputs: ['color'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_LABEL_GLOBAL_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    floatLabel: [{\n      type: Input\n    }],\n    appearance: [{\n      type: Input\n    }],\n    hideRequiredMarker: [{\n      type: Input\n    }],\n    hintLabel: [{\n      type: Input\n    }],\n    underlineRef: [{\n      type: ViewChild,\n      args: ['underline']\n    }],\n    _connectionContainerRef: [{\n      type: ViewChild,\n      args: ['connectionContainer']\n    }],\n    _inputContainerRef: [{\n      type: ViewChild,\n      args: ['inputContainer']\n    }],\n    _label: [{\n      type: ViewChild,\n      args: ['label']\n    }],\n    _control: [{\n      type: ContentChild,\n      args: [MatFormFieldControl]\n    }],\n    _placeholderChild: [{\n      type: ContentChild,\n      args: [MatPlaceholder]\n    }],\n    _labelChild: [{\n      type: ContentChild,\n      args: [MatLabel]\n    }],\n    _errorChildren: [{\n      type: ContentChildren,\n      args: [MatError]\n    }],\n    _hintChildren: [{\n      type: ContentChildren,\n      args: [MatHint]\n    }],\n    _prefixChildren: [{\n      type: ContentChildren,\n      args: [MatPrefix]\n    }],\n    _suffixChildren: [{\n      type: ContentChildren,\n      args: [MatSuffix]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatFormFieldModule = function MatFormFieldModule() {\n  _classCallCheck(this, MatFormFieldModule);\n};\n\nMatFormFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatFormFieldModule\n});\nMatFormFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatFormFieldModule_Factory(t) {\n    return new (t || MatFormFieldModule)();\n  },\n  imports: [[CommonModule, ObserversModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatFormFieldModule, {\n    declarations: function declarations() {\n      return [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix];\n    },\n    imports: function imports() {\n      return [CommonModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatFormFieldModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix],\n      imports: [CommonModule, ObserversModule],\n      exports: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatFormFieldModule, MatError, MatFormFieldBase, _MatFormFieldMixinBase, MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormField, MatFormFieldControl, getMatFormFieldPlaceholderConflictError, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, MatHint, MatPlaceholder, MatPrefix, MatSuffix, MatLabel, matFormFieldAnimations };","map":{"version":3,"sources":["../../../src/lib/form-field/error.ts","../../../src/lib/form-field/form-field-animations.ts","../../../src/lib/form-field/form-field-control.ts","../../../src/lib/form-field/form-field-errors.ts","../../../src/lib/form-field/hint.ts","../../../src/lib/form-field/label.ts","../../../src/lib/form-field/placeholder.ts","../../../src/lib/form-field/prefix.ts","../../../src/lib/form-field/suffix.ts","../../../src/lib/form-field/form-field.ts","../../../src/lib/form-field/form-field-module.ts"],"names":["nextUniqueId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n"]},"metadata":{},"sourceType":"module"}