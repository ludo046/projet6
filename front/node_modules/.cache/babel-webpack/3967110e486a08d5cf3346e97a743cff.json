{"ast":null,"code":"import _createClass from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/ludovicmoissinac/projet6/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nvar nextId = 0;\n/**\n * \\@docs-private\n */\n\nvar MatBadgeBase = function MatBadgeBase() {\n  _classCallCheck(this, MatBadgeBase);\n};\n/** @type {?} */\n\n\nvar _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\n\n\nvar MatBadge = /*#__PURE__*/function (_MatBadgeMixinBase2) {\n  _inherits(MatBadge, _MatBadgeMixinBase2);\n\n  var _super = _createSuper(MatBadge);\n\n  /**\n   * @param {?} _document\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _ariaDescriber\n   * @param {?=} _renderer\n   */\n  function MatBadge(_document, _ngZone, _elementRef, _ariaDescriber, _renderer) {\n    var _this;\n\n    _classCallCheck(this, MatBadge);\n\n    _this = _super.call(this);\n    _this._document = _document;\n    _this._ngZone = _ngZone;\n    _this._elementRef = _elementRef;\n    _this._ariaDescriber = _ariaDescriber;\n    _this._renderer = _renderer;\n    /**\n     * Whether the badge has any content.\n     */\n\n    _this._hasContent = false;\n    _this._color = 'primary';\n    _this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n\n    _this.position = 'above after';\n    /**\n     * Size of the badge. Can be 'small', 'medium', or 'large'.\n     */\n\n    _this.size = 'medium';\n    /**\n     * Unique id for the badge\n     */\n\n    _this._id = nextId++;\n    return _this;\n  }\n  /**\n   * The color of the badge. Can be `primary`, `accent`, or `warn`.\n   * @return {?}\n   */\n\n\n  _createClass(MatBadge, [{\n    key: \"color\",\n    get: function get() {\n      return this._color;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._setColor(value);\n\n      this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"overlap\",\n    get: function get() {\n      return this._overlap;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * The content for the badge\n     * @return {?}\n     */\n\n  }, {\n    key: \"content\",\n    get: function get() {\n      return this._content;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._content = value;\n      this._hasContent = value != null && \"\".concat(value).trim().length > 0;\n\n      this._updateTextContent();\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this._description;\n    }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    ,\n    set: function set(newDescription) {\n      if (newDescription !== this._description) {\n        this._updateHostAriaDescription(newDescription, this._description);\n\n        this._description = newDescription;\n      }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      return this._hidden;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAbove\",\n    value: function isAbove() {\n      return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAfter\",\n    value: function isAfter() {\n      return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.description && this._badgeElement) {\n        this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n      }\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTextContent\",\n    value: function _updateTextContent() {\n      if (!this._badgeElement) {\n        this._badgeElement = this._createBadgeElement();\n      } else {\n        this._badgeElement.textContent = this.content;\n      }\n\n      return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createBadgeElement\",\n    value: function _createBadgeElement() {\n      /** @type {?} */\n      var rootNode = this._renderer || this._document;\n      /** @type {?} */\n\n      var badgeElement = rootNode.createElement('span');\n      /** @type {?} */\n\n      var activeClass = 'mat-badge-active';\n      badgeElement.setAttribute('id', \"mat-badge-content-\".concat(this._id));\n      badgeElement.classList.add('mat-badge-content');\n      badgeElement.textContent = this.content;\n\n      if (this.description) {\n        badgeElement.setAttribute('aria-label', this.description);\n      }\n\n      this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n      if (typeof requestAnimationFrame === 'function') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            badgeElement.classList.add(activeClass);\n          });\n        });\n      } else {\n        badgeElement.classList.add(activeClass);\n      }\n\n      return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateHostAriaDescription\",\n    value: function _updateHostAriaDescription(newDescription, oldDescription) {\n      /** @type {?} */\n      var content = this._updateTextContent();\n\n      if (oldDescription) {\n        this._ariaDescriber.removeDescription(content, oldDescription);\n      }\n\n      if (newDescription) {\n        this._ariaDescriber.describe(content, newDescription);\n      }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @param {?} colorPalette\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setColor\",\n    value: function _setColor(colorPalette) {\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(\"mat-badge-\".concat(this._color));\n        }\n\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(\"mat-badge-\".concat(colorPalette));\n        }\n      }\n    }\n  }]);\n\n  return MatBadge;\n}(_MatBadgeMixinBase);\n\nMatBadge.ɵfac = function MatBadge_Factory(t) {\n  return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatBadge,\n  selectors: [[\"\", \"matBadge\", \"\"]],\n  hostAttrs: [1, \"mat-badge\"],\n  hostVars: 20,\n  hostBindings: function MatBadge_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: [\"matBadgeDisabled\", \"disabled\"],\n    position: [\"matBadgePosition\", \"position\"],\n    size: [\"matBadgeSize\", \"size\"],\n    color: [\"matBadgeColor\", \"color\"],\n    overlap: [\"matBadgeOverlap\", \"overlap\"],\n    content: [\"matBadge\", \"content\"],\n    description: [\"matBadgeDescription\", \"description\"],\n    hidden: [\"matBadgeHidden\", \"hidden\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatBadge.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: ElementRef\n  }, {\n    type: AriaDescriber\n  }, {\n    type: Renderer2\n  }];\n};\n\nMatBadge.propDecorators = {\n  color: [{\n    type: Input,\n    args: ['matBadgeColor']\n  }],\n  overlap: [{\n    type: Input,\n    args: ['matBadgeOverlap']\n  }],\n  position: [{\n    type: Input,\n    args: ['matBadgePosition']\n  }],\n  content: [{\n    type: Input,\n    args: ['matBadge']\n  }],\n  description: [{\n    type: Input,\n    args: ['matBadgeDescription']\n  }],\n  size: [{\n    type: Input,\n    args: ['matBadgeSize']\n  }],\n  hidden: [{\n    type: Input,\n    args: ['matBadgeHidden']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      inputs: ['disabled: matBadgeDisabled'],\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n        '[class.mat-badge-disabled]': 'disabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.AriaDescriber\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: ['matBadgeOverlap']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    hidden: [{\n      type: Input,\n      args: ['matBadgeHidden']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar MatBadgeModule = function MatBadgeModule() {\n  _classCallCheck(this, MatBadgeModule);\n};\n\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatBadgeModule\n});\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatBadgeModule_Factory(t) {\n    return new (t || MatBadgeModule)();\n  },\n  imports: [[A11yModule, MatCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, {\n    declarations: function declarations() {\n      return [MatBadge];\n    },\n    imports: function imports() {\n      return [A11yModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatBadge];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, MatCommonModule],\n      exports: [MatBadge],\n      declarations: [MatBadge]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatBadgeModule, MatBadgeBase, _MatBadgeMixinBase, MatBadge };","map":{"version":3,"sources":["../../../src/lib/badge/badge.ts","../../../src/lib/badge/badge-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n"]},"metadata":{},"sourceType":"module"}