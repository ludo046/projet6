{"ast":null,"code":"import _createClass from \"/Users/ludovicmoissinac/dev/projetFormation/projet6/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/ludovicmoissinac/dev/projetFormation/projet6/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, ElementRef, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, NgModule } from '@angular/core';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@angular/cdk/keycodes';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport '@angular/forms';\nimport { Subject, of } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nfunction CdkStep_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nvar _c0 = [\"*\"];\n\nvar CdkStepLabel =\n/**\n * @param {?} template\n */\nfunction CdkStepLabel(template) {\n  _classCallCheck(this, CdkStepLabel);\n\n  this.template = template;\n};\n\nCdkStepLabel.ɵfac = function CdkStepLabel_Factory(t) {\n  return new (t || CdkStepLabel)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkStepLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkStepLabel,\n  selectors: [[\"\", \"cdkStepLabel\", \"\"]]\n});\n/** @nocollapse */\n\nCdkStepLabel.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepLabel, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkStepLabel]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Used to generate unique ID for each stepper component.\n  @type {?} */\n\n\nvar nextId = 0;\n/**\n * Change event emitted on selection changes.\n */\n\nvar StepperSelectionEvent = function StepperSelectionEvent() {\n  _classCallCheck(this, StepperSelectionEvent);\n};\n/** *\n * Enum to represent the different states of the steps.\n  @type {?} */\n\n\nvar STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error'\n};\n/** *\n * InjectionToken that can be used to specify the global stepper options.\n  @type {?} */\n\nvar MAT_STEPPER_GLOBAL_OPTIONS = new InjectionToken('mat-stepper-global-options');\n\nvar CdkStep = /*#__PURE__*/function () {\n  /**\n   * \\@breaking-change 8.0.0 remove the `?` after `stepperOptions`\n   * @param {?} _stepper\n   * @param {?=} stepperOptions\n   */\n  function CdkStep(_stepper, stepperOptions) {\n    _classCallCheck(this, CdkStep);\n\n    this._stepper = _stepper;\n    /**\n     * Whether user has seen the expanded step content or not.\n     */\n\n    this.interacted = false;\n    this._editable = true;\n    this._optional = false;\n    this._customCompleted = null;\n    this._customError = null;\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n    this._showError = !!this._stepperOptions.showError;\n  }\n  /**\n   * Whether the user can return to this step once it has been marked as complted.\n   * @return {?}\n   */\n\n\n  _createClass(CdkStep, [{\n    key: \"editable\",\n    get: function get() {\n      return this._editable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._editable = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the completion of step is optional.\n     * @return {?}\n     */\n\n  }, {\n    key: \"optional\",\n    get: function get() {\n      return this._optional;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._optional = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether step is marked as completed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"completed\",\n    get: function get() {\n      return this._customCompleted == null ? this._getDefaultCompleted() : this._customCompleted;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._customCompleted = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDefaultCompleted\",\n    value: function _getDefaultCompleted() {\n      return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n    }\n    /**\n     * Whether step has an error.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasError\",\n    get: function get() {\n      return this._customError || this._getDefaultError();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._customError = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDefaultError\",\n    value: function _getDefaultError() {\n      return this.stepControl && this.stepControl.invalid && this.interacted;\n    }\n    /**\n     * Selects this step component.\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      this._stepper.selected = this;\n    }\n    /**\n     * Resets the step to its initial state. Note that this includes resetting form data.\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.interacted = false;\n\n      if (this._customCompleted != null) {\n        this._customCompleted = false;\n      }\n\n      if (this._customError != null) {\n        this._customError = false;\n      }\n\n      if (this.stepControl) {\n        this.stepControl.reset();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      // Since basically all inputs of the MatStep get proxied through the view down to the\n      // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n      this._stepper._stateChanged();\n    }\n  }]);\n\n  return CdkStep;\n}();\n\nCdkStep.ɵfac = function CdkStep_Factory(t) {\n  return new (t || CdkStep)(ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n    return CdkStepper;\n  })), ɵngcc0.ɵɵdirectiveInject(MAT_STEPPER_GLOBAL_OPTIONS, 8));\n};\n\nCdkStep.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkStep,\n  selectors: [[\"cdk-step\"]],\n  contentQueries: function CdkStep_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStepLabel, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepLabel = _t.first);\n    }\n  },\n  viewQuery: function CdkStep_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n    }\n  },\n  inputs: {\n    editable: \"editable\",\n    optional: \"optional\",\n    completed: \"completed\",\n    hasError: \"hasError\",\n    stepControl: \"stepControl\",\n    label: \"label\",\n    errorMessage: \"errorMessage\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    state: \"state\"\n  },\n  exportAs: [\"cdkStep\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function CdkStep_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, CdkStep_ng_template_0_Template, 1, 0, \"ng-template\");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nCdkStep.ctorParameters = function () {\n  return [{\n    type: CdkStepper,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(function () {\n        return CdkStepper;\n      })]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_STEPPER_GLOBAL_OPTIONS]\n    }]\n  }];\n};\n\nCdkStep.propDecorators = {\n  stepLabel: [{\n    type: ContentChild,\n    args: [CdkStepLabel]\n  }],\n  content: [{\n    type: ViewChild,\n    args: [TemplateRef]\n  }],\n  stepControl: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  errorMessage: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  state: [{\n    type: Input\n  }],\n  editable: [{\n    type: Input\n  }],\n  optional: [{\n    type: Input\n  }],\n  completed: [{\n    type: Input\n  }],\n  hasError: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStep, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-step',\n      exportAs: 'cdkStep',\n      template: '<ng-template><ng-content></ng-content></ng-template>',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: CdkStepper,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return CdkStepper;\n        })]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_STEPPER_GLOBAL_OPTIONS]\n      }]\n    }];\n  }, {\n    editable: [{\n      type: Input\n    }],\n    optional: [{\n      type: Input\n    }],\n    completed: [{\n      type: Input\n    }],\n    hasError: [{\n      type: Input\n    }],\n    stepLabel: [{\n      type: ContentChild,\n      args: [CdkStepLabel]\n    }],\n    content: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    stepControl: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    errorMessage: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    state: [{\n      type: Input\n    }]\n  });\n})();\n\nvar CdkStepper = /*#__PURE__*/function () {\n  /**\n   * @param {?} _dir\n   * @param {?} _changeDetectorRef\n   * @param {?=} _elementRef\n   * @param {?=} _document\n   */\n  function CdkStepper(_dir, _changeDetectorRef, _elementRef, _document) {\n    _classCallCheck(this, CdkStepper);\n\n    this._dir = _dir;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    /**\n     * Emits when the component is destroyed.\n     */\n\n    this._destroyed = new Subject();\n    this._linear = false;\n    this._selectedIndex = 0;\n    /**\n     * Event emitted when the selected step has changed.\n     */\n\n    this.selectionChange = new EventEmitter();\n    this._orientation = 'horizontal';\n    this._groupId = nextId++;\n    this._document = _document;\n  }\n  /**\n   * Whether the validity of previous steps should be checked or not.\n   * @return {?}\n   */\n\n\n  _createClass(CdkStepper, [{\n    key: \"linear\",\n    get: function get() {\n      return this._linear;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._linear = coerceBooleanProperty(value);\n    }\n    /**\n     * The index of the selected step.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      return this._selectedIndex;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ,\n    set: function set(index) {\n      if (this._steps) {\n        // Ensure that the index can't be out of bounds.\n        if (index < 0 || index > this._steps.length - 1) {\n          throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n        }\n\n        if (this._selectedIndex != index && !this._anyControlsInvalidOrPending(index) && (index >= this._selectedIndex || this._steps.toArray()[index].editable)) {\n          this._updateSelectedItemIndex(index);\n        }\n      } else {\n        this._selectedIndex = index;\n      }\n    }\n    /**\n     * The step that is selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n      return this._steps ? this._steps.toArray()[this.selectedIndex] :\n      /** @type {?} */\n      undefined;\n    }\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    ,\n    set: function set(step) {\n      this.selectedIndex = this._steps ? this._steps.toArray().indexOf(step) : -1;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      this._keyManager = new FocusKeyManager(this._stepHeader).withWrap().withVerticalOrientation(this._orientation === 'vertical');\n      (this._dir ?\n      /** @type {?} */\n      this._dir.change : of()).pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed)).subscribe(function (direction) {\n        return _this._keyManager.withHorizontalOrientation(direction);\n      });\n\n      this._keyManager.updateActiveItemIndex(this._selectedIndex);\n\n      this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        if (!_this.selected) {\n          _this._selectedIndex = Math.max(_this._selectedIndex - 1, 0);\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Selects and focuses the next step in list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.selectedIndex = Math.min(this._selectedIndex + 1, this._steps.length - 1);\n    }\n    /**\n     * Selects and focuses the previous step in list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"previous\",\n    value: function previous() {\n      this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n    }\n    /**\n     * Resets the stepper to its initial state. Note that this includes clearing form data.\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._updateSelectedItemIndex(0);\n\n      this._steps.forEach(function (step) {\n        return step.reset();\n      });\n\n      this._stateChanged();\n    }\n    /**\n     * Returns a unique id for each step label element.\n     * @param {?} i\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getStepLabelId\",\n    value: function _getStepLabelId(i) {\n      return \"cdk-step-label-\".concat(this._groupId, \"-\").concat(i);\n    }\n    /**\n     * Returns unique id for each step content element.\n     * @param {?} i\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getStepContentId\",\n    value: function _getStepContentId(i) {\n      return \"cdk-step-content-\".concat(this._groupId, \"-\").concat(i);\n    }\n    /**\n     * Marks the component to be change detected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_stateChanged\",\n    value: function _stateChanged() {\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns position state of the step with the given index.\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAnimationDirection\",\n    value: function _getAnimationDirection(index) {\n      /** @type {?} */\n      var position = index - this._selectedIndex;\n\n      if (position < 0) {\n        return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n      } else if (position > 0) {\n        return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n      }\n\n      return 'current';\n    }\n    /**\n     * Returns the type of icon to be displayed.\n     * @param {?} index\n     * @param {?=} state\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getIndicatorType\",\n    value: function _getIndicatorType(index) {\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : STEP_STATE.NUMBER;\n\n      /** @type {?} */\n      var step = this._steps.toArray()[index];\n      /** @type {?} */\n\n\n      var isCurrentStep = this._isCurrentStep(index);\n\n      return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) : this._getGuidelineLogic(step, isCurrentStep, state);\n    }\n    /**\n     * @param {?} step\n     * @param {?} isCurrentStep\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDefaultIndicatorLogic\",\n    value: function _getDefaultIndicatorLogic(step, isCurrentStep) {\n      if (step._showError && step.hasError && !isCurrentStep) {\n        return STEP_STATE.ERROR;\n      } else if (!step.completed || isCurrentStep) {\n        return STEP_STATE.NUMBER;\n      } else {\n        return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n      }\n    }\n    /**\n     * @param {?} step\n     * @param {?} isCurrentStep\n     * @param {?=} state\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getGuidelineLogic\",\n    value: function _getGuidelineLogic(step, isCurrentStep) {\n      var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STEP_STATE.NUMBER;\n\n      if (step._showError && step.hasError && !isCurrentStep) {\n        return STEP_STATE.ERROR;\n      } else if (step.completed && !isCurrentStep) {\n        return STEP_STATE.DONE;\n      } else if (step.completed && isCurrentStep) {\n        return state;\n      } else if (step.editable && isCurrentStep) {\n        return STEP_STATE.EDIT;\n      } else {\n        return state;\n      }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isCurrentStep\",\n    value: function _isCurrentStep(index) {\n      return this._selectedIndex === index;\n    }\n    /**\n     * Returns the index of the currently-focused step header.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getFocusIndex\",\n    value: function _getFocusIndex() {\n      return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n    }\n    /**\n     * @param {?} newIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateSelectedItemIndex\",\n    value: function _updateSelectedItemIndex(newIndex) {\n      /** @type {?} */\n      var stepsArray = this._steps.toArray();\n\n      this.selectionChange.emit({\n        selectedIndex: newIndex,\n        previouslySelectedIndex: this._selectedIndex,\n        selectedStep: stepsArray[newIndex],\n        previouslySelectedStep: stepsArray[this._selectedIndex]\n      }); // If focus is inside the stepper, move it to the next header, otherwise it may become\n      // lost when the active step content is hidden. We can't be more granular with the check\n      // (e.g. checking whether focus is inside the active step), because we don't have a\n      // reference to the elements that are rendering out the content.\n\n      this._containsFocus() ? this._keyManager.setActiveItem(newIndex) : this._keyManager.updateActiveItemIndex(newIndex);\n      this._selectedIndex = newIndex;\n\n      this._stateChanged();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onKeydown\",\n    value: function _onKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n\n      if (this._keyManager.activeItemIndex != null && (keyCode === SPACE || keyCode === ENTER)) {\n        this.selectedIndex = this._keyManager.activeItemIndex;\n        event.preventDefault();\n      } else if (keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n\n        event.preventDefault();\n      } else if (keyCode === END) {\n        this._keyManager.setLastItemActive();\n\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_anyControlsInvalidOrPending\",\n    value: function _anyControlsInvalidOrPending(index) {\n      /** @type {?} */\n      var steps = this._steps.toArray();\n\n      steps[this._selectedIndex].interacted = true;\n\n      if (this._linear && index >= 0) {\n        return steps.slice(0, index).some(function (step) {\n          /** @type {?} */\n          var control = step.stepControl;\n          /** @type {?} */\n\n          var isIncomplete = control ? control.invalid || control.pending || !step.interacted : !step.completed;\n          return isIncomplete && !step.optional;\n        });\n      }\n\n      return false;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_layoutDirection\",\n    value: function _layoutDirection() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Checks whether the stepper contains the focused element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_containsFocus\",\n    value: function _containsFocus() {\n      if (!this._document || !this._elementRef) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var stepperElement = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var focusedElement = this._document.activeElement;\n      return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n    }\n  }]);\n\n  return CdkStepper;\n}();\n\nCdkStepper.ɵfac = function CdkStepper_Factory(t) {\n  return new (t || CdkStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nCdkStepper.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkStepper,\n  selectors: [[\"\", \"cdkStepper\", \"\"]],\n  contentQueries: function CdkStepper_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStep, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._steps = _t);\n    }\n  },\n  inputs: {\n    linear: \"linear\",\n    selectedIndex: \"selectedIndex\",\n    selected: \"selected\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\"\n  },\n  exportAs: [\"cdkStepper\"]\n});\n/** @nocollapse */\n\nCdkStepper.ctorParameters = function () {\n  return [{\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nCdkStepper.propDecorators = {\n  _steps: [{\n    type: ContentChildren,\n    args: [CdkStep]\n  }],\n  linear: [{\n    type: Input\n  }],\n  selectedIndex: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepper, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkStepper]',\n      exportAs: 'cdkStepper'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    linear: [{\n      type: Input\n    }],\n    selectedIndex: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    _steps: [{\n      type: ContentChildren,\n      args: [CdkStep]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Button that moves to the next step in a stepper workflow.\n */\n\n\nvar CdkStepperNext =\n/**\n * @param {?} _stepper\n */\nfunction CdkStepperNext(_stepper) {\n  _classCallCheck(this, CdkStepperNext);\n\n  this._stepper = _stepper;\n  /**\n   * Type of the next button. Defaults to \"submit\" if not specified.\n   */\n\n  this.type = 'submit';\n};\n\nCdkStepperNext.ɵfac = function CdkStepperNext_Factory(t) {\n  return new (t || CdkStepperNext)(ɵngcc0.ɵɵdirectiveInject(CdkStepper));\n};\n\nCdkStepperNext.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkStepperNext,\n  selectors: [[\"button\", \"cdkStepperNext\", \"\"]],\n  hostVars: 1,\n  hostBindings: function CdkStepperNext_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkStepperNext_click_HostBindingHandler() {\n        return ctx._stepper.next();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    type: \"type\"\n  }\n});\n/** @nocollapse */\n\nCdkStepperNext.ctorParameters = function () {\n  return [{\n    type: CdkStepper\n  }];\n};\n\nCdkStepperNext.propDecorators = {\n  type: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepperNext, [{\n    type: Directive,\n    args: [{\n      selector: 'button[cdkStepperNext]',\n      host: {\n        '(click)': '_stepper.next()',\n        '[type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkStepper\n    }];\n  }, {\n    type: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\n\n\nvar CdkStepperPrevious =\n/**\n * @param {?} _stepper\n */\nfunction CdkStepperPrevious(_stepper) {\n  _classCallCheck(this, CdkStepperPrevious);\n\n  this._stepper = _stepper;\n  /**\n   * Type of the previous button. Defaults to \"button\" if not specified.\n   */\n\n  this.type = 'button';\n};\n\nCdkStepperPrevious.ɵfac = function CdkStepperPrevious_Factory(t) {\n  return new (t || CdkStepperPrevious)(ɵngcc0.ɵɵdirectiveInject(CdkStepper));\n};\n\nCdkStepperPrevious.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkStepperPrevious,\n  selectors: [[\"button\", \"cdkStepperPrevious\", \"\"]],\n  hostVars: 1,\n  hostBindings: function CdkStepperPrevious_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkStepperPrevious_click_HostBindingHandler() {\n        return ctx._stepper.previous();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    type: \"type\"\n  }\n});\n/** @nocollapse */\n\nCdkStepperPrevious.ctorParameters = function () {\n  return [{\n    type: CdkStepper\n  }];\n};\n\nCdkStepperPrevious.propDecorators = {\n  type: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepperPrevious, [{\n    type: Directive,\n    args: [{\n      selector: 'button[cdkStepperPrevious]',\n      host: {\n        '(click)': '_stepper.previous()',\n        '[type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkStepper\n    }];\n  }, {\n    type: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar CdkStepperModule = function CdkStepperModule() {\n  _classCallCheck(this, CdkStepperModule);\n};\n\nCdkStepperModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CdkStepperModule\n});\nCdkStepperModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CdkStepperModule_Factory(t) {\n    return new (t || CdkStepperModule)();\n  },\n  imports: [[BidiModule, CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkStepperModule, {\n    declarations: function declarations() {\n      return [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious];\n    },\n    imports: function imports() {\n      return [BidiModule, CommonModule];\n    },\n    exports: function exports() {\n      return [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepperModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, CommonModule],\n      exports: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n      declarations: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { StepperSelectionEvent, STEP_STATE, MAT_STEPPER_GLOBAL_OPTIONS, CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious, CdkStepperModule };","map":{"version":3,"sources":["../../../src/cdk/stepper/step-label.ts","../../../src/cdk/stepper/stepper.ts","../../../src/cdk/stepper/stepper-button.ts","../../../src/cdk/stepper/stepper-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[cdkStepLabel]',\n})\nexport class CdkStepLabel {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AbstractControl} from '@angular/forms';\nimport {CdkStepLabel} from './step-label';\nimport {Observable, Subject, of as obaservableOf} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\n\n/** Possible orientation of a stepper. */\nexport type StepperOrientation = 'horizontal' | 'vertical';\n\n/** Change event emitted on selection changes. */\nexport class StepperSelectionEvent {\n  /** Index of the step now selected. */\n  selectedIndex: number;\n\n  /** Index of the step previously selected. */\n  previouslySelectedIndex: number;\n\n  /** The step instance now selected. */\n  selectedStep: CdkStep;\n\n  /** The step instance previously selected. */\n  previouslySelectedStep: CdkStep;\n}\n\n/** The state of each step. */\nexport type StepState = 'number' | 'edit' | 'done' | 'error' | string;\n\n/** Enum to represent the different states of the steps. */\nexport const STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error'\n};\n\n/** InjectionToken that can be used to specify the global stepper options. */\nexport const MAT_STEPPER_GLOBAL_OPTIONS =\n  new InjectionToken<StepperOptions>('mat-stepper-global-options');\n\n/** Configurable options for stepper. */\nexport interface StepperOptions {\n  /**\n   * Whether the stepper should display an error state or not.\n   * Default behavior is assumed to be false.\n   */\n  showError?: boolean;\n\n  /**\n   * Whether the stepper should display the default indicator type\n   * or not.\n   * Default behavior is assumed to be true.\n   */\n  displayDefaultIndicatorType?: boolean;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-step',\n  exportAs: 'cdkStep',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkStep implements OnChanges {\n  private _stepperOptions: StepperOptions;\n  _showError: boolean;\n  _displayDefaultIndicatorType: boolean;\n\n  /** Template for step label if it exists. */\n  @ContentChild(CdkStepLabel) stepLabel: CdkStepLabel;\n\n  /** Template for step content. */\n  @ViewChild(TemplateRef) content: TemplateRef<any>;\n\n  /** The top level abstract control of the step. */\n  @Input() stepControl: AbstractControl;\n\n  /** Whether user has seen the expanded step content or not. */\n  interacted = false;\n\n  /** Plain text label of the step. */\n  @Input() label: string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** State of the step. */\n  @Input() state: StepState;\n\n  /** Whether the user can return to this step once it has been marked as complted. */\n  @Input()\n  get editable(): boolean { return this._editable; }\n  set editable(value: boolean) {\n    this._editable = coerceBooleanProperty(value);\n  }\n  private _editable = true;\n\n  /** Whether the completion of step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional = false;\n\n  /** Whether step is marked as completed. */\n  @Input()\n  get completed(): boolean {\n    return this._customCompleted == null ? this._getDefaultCompleted() : this._customCompleted;\n  }\n  set completed(value: boolean) {\n    this._customCompleted = coerceBooleanProperty(value);\n  }\n  private _customCompleted: boolean | null = null;\n\n  private _getDefaultCompleted() {\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n  }\n\n  /** Whether step has an error. */\n  @Input()\n  get hasError(): boolean {\n    return this._customError || this._getDefaultError();\n  }\n  set hasError(value: boolean) {\n    this._customError = coerceBooleanProperty(value);\n  }\n  private _customError: boolean | null = null;\n\n  private _getDefaultError() {\n    return this.stepControl && this.stepControl.invalid && this.interacted;\n  }\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(\n    @Inject(forwardRef(() => CdkStepper)) private _stepper: CdkStepper,\n    @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n    this._showError = !!this._stepperOptions.showError;\n  }\n\n  /** Selects this step component. */\n  select(): void {\n    this._stepper.selected = this;\n  }\n\n  /** Resets the step to its initial state. Note that this includes resetting form data. */\n  reset(): void {\n    this.interacted = false;\n\n    if (this._customCompleted != null) {\n      this._customCompleted = false;\n    }\n\n    if (this._customError != null) {\n      this._customError = false;\n    }\n\n    if (this.stepControl) {\n      this.stepControl.reset();\n    }\n  }\n\n  ngOnChanges() {\n    // Since basically all inputs of the MatStep get proxied through the view down to the\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n    this._stepper._stateChanged();\n  }\n}\n\n@Directive({\n  selector: '[cdkStepper]',\n  exportAs: 'cdkStepper',\n})\nexport class CdkStepper implements AfterViewInit, OnDestroy {\n  /** Emits when the component is destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Used for managing keyboard focus. */\n  private _keyManager: FocusKeyManager<FocusableOption>;\n\n  /**\n   * @breaking-change 8.0.0 Remove `| undefined` once the `_document`\n   * constructor param is required.\n   */\n  private _document: Document | undefined;\n\n  /** The list of step components that the stepper is holding. */\n  @ContentChildren(CdkStep) _steps: QueryList<CdkStep>;\n\n  /** The list of step headers of the steps in the stepper. */\n  _stepHeader: QueryList<FocusableOption>;\n\n  /** Whether the validity of previous steps should be checked or not. */\n  @Input()\n  get linear(): boolean { return this._linear; }\n  set linear(value: boolean) { this._linear = coerceBooleanProperty(value); }\n  private _linear = false;\n\n  /** The index of the selected step. */\n  @Input()\n  get selectedIndex() { return this._selectedIndex; }\n  set selectedIndex(index: number) {\n    if (this._steps) {\n      // Ensure that the index can't be out of bounds.\n      if (index < 0 || index > this._steps.length - 1) {\n        throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n      }\n\n      if (this._selectedIndex != index &&\n          !this._anyControlsInvalidOrPending(index) &&\n          (index >= this._selectedIndex || this._steps.toArray()[index].editable)) {\n        this._updateSelectedItemIndex(index);\n      }\n    } else {\n      this._selectedIndex = index;\n    }\n  }\n  private _selectedIndex = 0;\n\n  /** The step that is selected. */\n  @Input()\n  get selected(): CdkStep {\n    // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n    return this._steps ? this._steps.toArray()[this.selectedIndex] : undefined!;\n  }\n  set selected(step: CdkStep) {\n    this.selectedIndex = this._steps ? this._steps.toArray().indexOf(step) : -1;\n  }\n\n  /** Event emitted when the selected step has changed. */\n  @Output() selectionChange: EventEmitter<StepperSelectionEvent>\n      = new EventEmitter<StepperSelectionEvent>();\n\n  /** Used to track unique ID for each stepper component. */\n  _groupId: number;\n\n  protected _orientation: StepperOrientation = 'horizontal';\n\n  constructor(\n    @Optional() private _dir: Directionality,\n    private _changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `_elementRef` and `_document` parameters to become required.\n    private _elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    this._groupId = nextId++;\n    this._document = _document;\n  }\n\n  ngAfterViewInit() {\n    this._keyManager = new FocusKeyManager(this._stepHeader)\n      .withWrap()\n      .withVerticalOrientation(this._orientation === 'vertical');\n\n    (this._dir ? this._dir.change as Observable<Direction> : obaservableOf<Direction>())\n      .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n      .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n\n    this._keyManager.updateActiveItemIndex(this._selectedIndex);\n\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      if (!this.selected) {\n        this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Selects and focuses the next step in list. */\n  next(): void {\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this._steps.length - 1);\n  }\n\n  /** Selects and focuses the previous step in list. */\n  previous(): void {\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n  }\n\n  /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n  reset(): void {\n    this._updateSelectedItemIndex(0);\n    this._steps.forEach(step => step.reset());\n    this._stateChanged();\n  }\n\n  /** Returns a unique id for each step label element. */\n  _getStepLabelId(i: number): string {\n    return `cdk-step-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns unique id for each step content element. */\n  _getStepContentId(i: number): string {\n    return `cdk-step-content-${this._groupId}-${i}`;\n  }\n\n  /** Marks the component to be change detected. */\n  _stateChanged() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Returns position state of the step with the given index. */\n  _getAnimationDirection(index: number): StepContentPositionState {\n    const position = index - this._selectedIndex;\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n\n  /** Returns the type of icon to be displayed. */\n  _getIndicatorType(index: number, state: StepState = STEP_STATE.NUMBER): StepState {\n    const step = this._steps.toArray()[index];\n    const isCurrentStep = this._isCurrentStep(index);\n\n    return step._displayDefaultIndicatorType\n      ? this._getDefaultIndicatorLogic(step, isCurrentStep)\n      : this._getGuidelineLogic(step, isCurrentStep, state);\n  }\n\n  private _getDefaultIndicatorLogic(step: CdkStep, isCurrentStep: boolean): StepState {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (!step.completed || isCurrentStep) {\n      return STEP_STATE.NUMBER;\n    } else {\n      return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n    }\n  }\n\n  private _getGuidelineLogic(\n    step: CdkStep,\n    isCurrentStep: boolean,\n    state: StepState = STEP_STATE.NUMBER): StepState {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (step.completed && !isCurrentStep) {\n      return STEP_STATE.DONE;\n    } else if (step.completed && isCurrentStep) {\n      return state;\n    } else if (step.editable && isCurrentStep) {\n      return STEP_STATE.EDIT;\n    } else {\n      return state;\n    }\n  }\n\n  private _isCurrentStep(index: number) {\n    return this._selectedIndex === index;\n  }\n\n  /** Returns the index of the currently-focused step header. */\n  _getFocusIndex() {\n    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n  }\n\n  private _updateSelectedItemIndex(newIndex: number): void {\n    const stepsArray = this._steps.toArray();\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: this._selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[this._selectedIndex],\n    });\n\n    // If focus is inside the stepper, move it to the next header, otherwise it may become\n    // lost when the active step content is hidden. We can't be more granular with the check\n    // (e.g. checking whether focus is inside the active step), because we don't have a\n    // reference to the elements that are rendering out the content.\n    this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n                            this._keyManager.updateActiveItemIndex(newIndex);\n\n    this._selectedIndex = newIndex;\n    this._stateChanged();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    if (this._keyManager.activeItemIndex != null && (keyCode === SPACE || keyCode === ENTER)) {\n      this.selectedIndex = this._keyManager.activeItemIndex;\n      event.preventDefault();\n    } else if (keyCode === HOME) {\n      this._keyManager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  private _anyControlsInvalidOrPending(index: number): boolean {\n    const steps = this._steps.toArray();\n\n    steps[this._selectedIndex].interacted = true;\n\n    if (this._linear && index >= 0) {\n      return steps.slice(0, index).some(step => {\n        const control = step.stepControl;\n        const isIncomplete = control ?\n            (control.invalid || control.pending || !step.interacted) :\n            !step.completed;\n        return isIncomplete && !step.optional;\n      });\n    }\n\n    return false;\n  }\n\n  private _layoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Checks whether the stepper contains the focused element. */\n  private _containsFocus(): boolean {\n    if (!this._document || !this._elementRef) {\n      return false;\n    }\n\n    const stepperElement = this._elementRef.nativeElement;\n    const focusedElement = this._document.activeElement;\n    return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  }\n})\nexport class CdkStepperNext {\n  /** Type of the next button. Defaults to \"submit\" if not specified. */\n  @Input() type: string = 'submit';\n\n  constructor(public _stepper: CdkStepper) {}\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  }\n})\nexport class CdkStepperPrevious {\n  /** Type of the previous button. Defaults to \"button\" if not specified. */\n  @Input() type: string = 'button';\n\n  constructor(public _stepper: CdkStepper) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkStepper, CdkStep} from './stepper';\nimport {CommonModule} from '@angular/common';\nimport {CdkStepLabel} from './step-label';\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n@NgModule({\n  imports: [BidiModule, CommonModule],\n  exports: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n  declarations: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]\n})\nexport class CdkStepperModule {}\n"]},"metadata":{},"sourceType":"module"}